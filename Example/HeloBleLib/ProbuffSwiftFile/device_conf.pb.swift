// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: device_conf.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum DeviceLanuage: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case english // = 0
  case chinese // = 1
  case italian // = 2
  case japanese // = 3
  case france // = 4
  case german // = 5
  case portuguese // = 6
  case spanish // = 7
  case russian // = 8
  case korean // = 9
  case arabic // = 10
  case vietnam // = 11
  case polish // = 12
  case romanian // = 13
  case swedish // = 14
  case thai // = 15
  case turkish // = 16
  case denish // = 17
  case ukrainian // = 18
  case norwegian // = 19
  case dutch // = 20
  case czech // = 21

  /// traditional chinese
  case chineseTc // = 22
  case indonesian // = 23
  case bare // = 255

  init() {
    self = .english
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .english
    case 1: self = .chinese
    case 2: self = .italian
    case 3: self = .japanese
    case 4: self = .france
    case 5: self = .german
    case 6: self = .portuguese
    case 7: self = .spanish
    case 8: self = .russian
    case 9: self = .korean
    case 10: self = .arabic
    case 11: self = .vietnam
    case 12: self = .polish
    case 13: self = .romanian
    case 14: self = .swedish
    case 15: self = .thai
    case 16: self = .turkish
    case 17: self = .denish
    case 18: self = .ukrainian
    case 19: self = .norwegian
    case 20: self = .dutch
    case 21: self = .czech
    case 22: self = .chineseTc
    case 23: self = .indonesian
    case 255: self = .bare
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .english: return 0
    case .chinese: return 1
    case .italian: return 2
    case .japanese: return 3
    case .france: return 4
    case .german: return 5
    case .portuguese: return 6
    case .spanish: return 7
    case .russian: return 8
    case .korean: return 9
    case .arabic: return 10
    case .vietnam: return 11
    case .polish: return 12
    case .romanian: return 13
    case .swedish: return 14
    case .thai: return 15
    case .turkish: return 16
    case .denish: return 17
    case .ukrainian: return 18
    case .norwegian: return 19
    case .dutch: return 20
    case .czech: return 21
    case .chineseTc: return 22
    case .indonesian: return 23
    case .bare: return 255
    }
  }

}

#if swift(>=4.2)

extension DeviceLanuage: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct DeviceLcdGs {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0[default]~23:  the start hour of switching lcd by gesture
  var lcdGsStartHour: UInt32 {
    get {return _lcdGsStartHour ?? 0}
    set {_lcdGsStartHour = newValue}
  }
  /// Returns true if `lcdGsStartHour` has been explicitly set.
  var hasLcdGsStartHour: Bool {return self._lcdGsStartHour != nil}
  /// Clears the value of `lcdGsStartHour`. Subsequent reads from it will return its default value.
  mutating func clearLcdGsStartHour() {self._lcdGsStartHour = nil}

  /// 0[default]~23:  the end hour of switching lcd by gesture
  var lcdGsEndHour: UInt32 {
    get {return _lcdGsEndHour ?? 0}
    set {_lcdGsEndHour = newValue}
  }
  /// Returns true if `lcdGsEndHour` has been explicitly set.
  var hasLcdGsEndHour: Bool {return self._lcdGsEndHour != nil}
  /// Clears the value of `lcdGsEndHour`. Subsequent reads from it will return its default value.
  mutating func clearLcdGsEndHour() {self._lcdGsEndHour = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lcdGsStartHour: UInt32? = nil
  fileprivate var _lcdGsEndHour: UInt32? = nil
}

struct HealthDataConfig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ecgConfig: Bool {
    get {return _ecgConfig ?? false}
    set {_ecgConfig = newValue}
  }
  /// Returns true if `ecgConfig` has been explicitly set.
  var hasEcgConfig: Bool {return self._ecgConfig != nil}
  /// Clears the value of `ecgConfig`. Subsequent reads from it will return its default value.
  mutating func clearEcgConfig() {self._ecgConfig = nil}

  var fatigueConfig: Bool {
    get {return _fatigueConfig ?? false}
    set {_fatigueConfig = newValue}
  }
  /// Returns true if `fatigueConfig` has been explicitly set.
  var hasFatigueConfig: Bool {return self._fatigueConfig != nil}
  /// Clears the value of `fatigueConfig`. Subsequent reads from it will return its default value.
  mutating func clearFatigueConfig() {self._fatigueConfig = nil}

  var bpConfig: Bool {
    get {return _bpConfig ?? false}
    set {_bpConfig = newValue}
  }
  /// Returns true if `bpConfig` has been explicitly set.
  var hasBpConfig: Bool {return self._bpConfig != nil}
  /// Clears the value of `bpConfig`. Subsequent reads from it will return its default value.
  mutating func clearBpConfig() {self._bpConfig = nil}

  var afConfig: Bool {
    get {return _afConfig ?? false}
    set {_afConfig = newValue}
  }
  /// Returns true if `afConfig` has been explicitly set.
  var hasAfConfig: Bool {return self._afConfig != nil}
  /// Clears the value of `afConfig`. Subsequent reads from it will return its default value.
  mutating func clearAfConfig() {self._afConfig = nil}

  var biozConfig: Bool {
    get {return _biozConfig ?? false}
    set {_biozConfig = newValue}
  }
  /// Returns true if `biozConfig` has been explicitly set.
  var hasBiozConfig: Bool {return self._biozConfig != nil}
  /// Clears the value of `biozConfig`. Subsequent reads from it will return its default value.
  mutating func clearBiozConfig() {self._biozConfig = nil}

  var moodConfig: Bool {
    get {return _moodConfig ?? false}
    set {_moodConfig = newValue}
  }
  /// Returns true if `moodConfig` has been explicitly set.
  var hasMoodConfig: Bool {return self._moodConfig != nil}
  /// Clears the value of `moodConfig`. Subsequent reads from it will return its default value.
  mutating func clearMoodConfig() {self._moodConfig = nil}

  var breathrateConfig: Bool {
    get {return _breathrateConfig ?? false}
    set {_breathrateConfig = newValue}
  }
  /// Returns true if `breathrateConfig` has been explicitly set.
  var hasBreathrateConfig: Bool {return self._breathrateConfig != nil}
  /// Clears the value of `breathrateConfig`. Subsequent reads from it will return its default value.
  mutating func clearBreathrateConfig() {self._breathrateConfig = nil}

  var mdtConfig: Bool {
    get {return _mdtConfig ?? false}
    set {_mdtConfig = newValue}
  }
  /// Returns true if `mdtConfig` has been explicitly set.
  var hasMdtConfig: Bool {return self._mdtConfig != nil}
  /// Clears the value of `mdtConfig`. Subsequent reads from it will return its default value.
  mutating func clearMdtConfig() {self._mdtConfig = nil}

  var spo2Config: Bool {
    get {return _spo2Config ?? false}
    set {_spo2Config = newValue}
  }
  /// Returns true if `spo2Config` has been explicitly set.
  var hasSpo2Config: Bool {return self._spo2Config != nil}
  /// Clears the value of `spo2Config`. Subsequent reads from it will return its default value.
  mutating func clearSpo2Config() {self._spo2Config = nil}

  var temperatureConfig: Bool {
    get {return _temperatureConfig ?? false}
    set {_temperatureConfig = newValue}
  }
  /// Returns true if `temperatureConfig` has been explicitly set.
  var hasTemperatureConfig: Bool {return self._temperatureConfig != nil}
  /// Clears the value of `temperatureConfig`. Subsequent reads from it will return its default value.
  mutating func clearTemperatureConfig() {self._temperatureConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _ecgConfig: Bool? = nil
  fileprivate var _fatigueConfig: Bool? = nil
  fileprivate var _bpConfig: Bool? = nil
  fileprivate var _afConfig: Bool? = nil
  fileprivate var _biozConfig: Bool? = nil
  fileprivate var _moodConfig: Bool? = nil
  fileprivate var _breathrateConfig: Bool? = nil
  fileprivate var _mdtConfig: Bool? = nil
  fileprivate var _spo2Config: Bool? = nil
  fileprivate var _temperatureConfig: Bool? = nil
}

struct DeviceConfNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: UInt32 {
    get {return _storage._hash ?? 0}
    set {_uniqueStorage()._hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  var hasHash: Bool {return _storage._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  mutating func clearHash() {_uniqueStorage()._hash = nil}

  /// English[default]
  var languageID: DeviceLanuage {
    get {return _storage._languageID ?? .english}
    set {_uniqueStorage()._languageID = newValue}
  }
  /// Returns true if `languageID` has been explicitly set.
  var hasLanguageID: Bool {return _storage._languageID != nil}
  /// Clears the value of `languageID`. Subsequent reads from it will return its default value.
  mutating func clearLanguageID() {_uniqueStorage()._languageID = nil}

  /// 0：disable lcd switching by gesture, 1[default]：enable lcd switching by gesture
  var lcdGsSwitch: Bool {
    get {return _storage._lcdGsSwitch ?? true}
    set {_uniqueStorage()._lcdGsSwitch = newValue}
  }
  /// Returns true if `lcdGsSwitch` has been explicitly set.
  var hasLcdGsSwitch: Bool {return _storage._lcdGsSwitch != nil}
  /// Clears the value of `lcdGsSwitch`. Subsequent reads from it will return its default value.
  mutating func clearLcdGsSwitch() {_uniqueStorage()._lcdGsSwitch = nil}

  var lcdGsTime: DeviceLcdGs {
    get {return _storage._lcdGsTime ?? DeviceLcdGs()}
    set {_uniqueStorage()._lcdGsTime = newValue}
  }
  /// Returns true if `lcdGsTime` has been explicitly set.
  var hasLcdGsTime: Bool {return _storage._lcdGsTime != nil}
  /// Clears the value of `lcdGsTime`. Subsequent reads from it will return its default value.
  mutating func clearLcdGsTime() {_uniqueStorage()._lcdGsTime = nil}

  /// 0[default]: metric unit, 1: imperial units
  var distanceUnit: Bool {
    get {return _storage._distanceUnit ?? false}
    set {_uniqueStorage()._distanceUnit = newValue}
  }
  /// Returns true if `distanceUnit` has been explicitly set.
  var hasDistanceUnit: Bool {return _storage._distanceUnit != nil}
  /// Clears the value of `distanceUnit`. Subsequent reads from it will return its default value.
  mutating func clearDistanceUnit() {_uniqueStorage()._distanceUnit = nil}

  /// 0[default]: Celsius, 1: Fahrenheit
  var temperatureUnit: Bool {
    get {return _storage._temperatureUnit ?? false}
    set {_uniqueStorage()._temperatureUnit = newValue}
  }
  /// Returns true if `temperatureUnit` has been explicitly set.
  var hasTemperatureUnit: Bool {return _storage._temperatureUnit != nil}
  /// Clears the value of `temperatureUnit`. Subsequent reads from it will return its default value.
  mutating func clearTemperatureUnit() {_uniqueStorage()._temperatureUnit = nil}

  /// 0[default]: 24hour, 1: 12hour
  var hourFormat: Bool {
    get {return _storage._hourFormat ?? false}
    set {_uniqueStorage()._hourFormat = newValue}
  }
  /// Returns true if `hourFormat` has been explicitly set.
  var hasHourFormat: Bool {return _storage._hourFormat != nil}
  /// Clears the value of `hourFormat`. Subsequent reads from it will return its default value.
  mutating func clearHourFormat() {_uniqueStorage()._hourFormat = nil}

  /// 0[default]: month/day, 1: day/month
  var dateFormat: Bool {
    get {return _storage._dateFormat ?? false}
    set {_uniqueStorage()._dateFormat = newValue}
  }
  /// Returns true if `dateFormat` has been explicitly set.
  var hasDateFormat: Bool {return _storage._dateFormat != nil}
  /// Clears the value of `dateFormat`. Subsequent reads from it will return its default value.
  mutating func clearDateFormat() {_uniqueStorage()._dateFormat = nil}

  /// 0[default]: disable auto-heartrate detection, 1: enable
  var autoHeartrate: Bool {
    get {return _storage._autoHeartrate ?? false}
    set {_uniqueStorage()._autoHeartrate = newValue}
  }
  /// Returns true if `autoHeartrate` has been explicitly set.
  var hasAutoHeartrate: Bool {return _storage._autoHeartrate != nil}
  /// Clears the value of `autoHeartrate`. Subsequent reads from it will return its default value.
  mutating func clearAutoHeartrate() {_uniqueStorage()._autoHeartrate = nil}

  /// 0[default]: disable auto-sport detection, 1: enable
  var autoSport: Bool {
    get {return _storage._autoSport ?? false}
    set {_uniqueStorage()._autoSport = newValue}
  }
  /// Returns true if `autoSport` has been explicitly set.
  var hasAutoSport: Bool {return _storage._autoSport != nil}
  /// Clears the value of `autoSport`. Subsequent reads from it will return its default value.
  mutating func clearAutoSport() {_uniqueStorage()._autoSport = nil}

  /// 0[default]: left hand
  var habitualHand: Bool {
    get {return _storage._habitualHand ?? false}
    set {_uniqueStorage()._habitualHand = newValue}
  }
  /// Returns true if `habitualHand` has been explicitly set.
  var hasHabitualHand: Bool {return _storage._habitualHand != nil}
  /// Clears the value of `habitualHand`. Subsequent reads from it will return its default value.
  mutating func clearHabitualHand() {_uniqueStorage()._habitualHand = nil}

  var nickName: String {
    get {return _storage._nickName ?? String()}
    set {_uniqueStorage()._nickName = newValue}
  }
  /// Returns true if `nickName` has been explicitly set.
  var hasNickName: Bool {return _storage._nickName != nil}
  /// Clears the value of `nickName`. Subsequent reads from it will return its default value.
  mutating func clearNickName() {_uniqueStorage()._nickName = nil}

  var autoAllsensor: Bool {
    get {return _storage._autoAllsensor ?? false}
    set {_uniqueStorage()._autoAllsensor = newValue}
  }
  /// Returns true if `autoAllsensor` has been explicitly set.
  var hasAutoAllsensor: Bool {return _storage._autoAllsensor != nil}
  /// Clears the value of `autoAllsensor`. Subsequent reads from it will return its default value.
  mutating func clearAutoAllsensor() {_uniqueStorage()._autoAllsensor = nil}

  var heathConfig: HealthDataConfig {
    get {return _storage._heathConfig ?? HealthDataConfig()}
    set {_uniqueStorage()._heathConfig = newValue}
  }
  /// Returns true if `heathConfig` has been explicitly set.
  var hasHeathConfig: Bool {return _storage._heathConfig != nil}
  /// Clears the value of `heathConfig`. Subsequent reads from it will return its default value.
  mutating func clearHeathConfig() {_uniqueStorage()._heathConfig = nil}

  var healthSleep: Bool {
    get {return _storage._healthSleep ?? false}
    set {_uniqueStorage()._healthSleep = newValue}
  }
  /// Returns true if `healthSleep` has been explicitly set.
  var hasHealthSleep: Bool {return _storage._healthSleep != nil}
  /// Clears the value of `healthSleep`. Subsequent reads from it will return its default value.
  mutating func clearHealthSleep() {_uniqueStorage()._healthSleep = nil}

  ///[default = 5]
  var backlightTime: UInt32 {
    get {return _storage._backlightTime ?? 0}
    set {_uniqueStorage()._backlightTime = newValue}
  }
  /// Returns true if `backlightTime` has been explicitly set.
  var hasBacklightTime: Bool {return _storage._backlightTime != nil}
  /// Clears the value of `backlightTime`. Subsequent reads from it will return its default value.
  mutating func clearBacklightTime() {_uniqueStorage()._backlightTime = nil}

  var gestureSensitivity: UInt32 {
    get {return _storage._gestureSensitivity ?? 0}
    set {_uniqueStorage()._gestureSensitivity = newValue}
  }
  /// Returns true if `gestureSensitivity` has been explicitly set.
  var hasGestureSensitivity: Bool {return _storage._gestureSensitivity != nil}
  /// Clears the value of `gestureSensitivity`. Subsequent reads from it will return its default value.
  mutating func clearGestureSensitivity() {_uniqueStorage()._gestureSensitivity = nil}

  var stepsSensitivity: UInt32 {
    get {return _storage._stepsSensitivity ?? 0}
    set {_uniqueStorage()._stepsSensitivity = newValue}
  }
  /// Returns true if `stepsSensitivity` has been explicitly set.
  var hasStepsSensitivity: Bool {return _storage._stepsSensitivity != nil}
  /// Clears the value of `stepsSensitivity`. Subsequent reads from it will return its default value.
  mutating func clearStepsSensitivity() {_uniqueStorage()._stepsSensitivity = nil}

  var powerOff: Bool {
    get {return _storage._powerOff ?? false}
    set {_uniqueStorage()._powerOff = newValue}
  }
  /// Returns true if `powerOff` has been explicitly set.
  var hasPowerOff: Bool {return _storage._powerOff != nil}
  /// Clears the value of `powerOff`. Subsequent reads from it will return its default value.
  mutating func clearPowerOff() {_uniqueStorage()._powerOff = nil}

  var factoryReset: Bool {
    get {return _storage._factoryReset ?? false}
    set {_uniqueStorage()._factoryReset = newValue}
  }
  /// Returns true if `factoryReset` has been explicitly set.
  var hasFactoryReset: Bool {return _storage._factoryReset != nil}
  /// Clears the value of `factoryReset`. Subsequent reads from it will return its default value.
  mutating func clearFactoryReset() {_uniqueStorage()._factoryReset = nil}

  var bleUnbind: Bool {
    get {return _storage._bleUnbind ?? false}
    set {_uniqueStorage()._bleUnbind = newValue}
  }
  /// Returns true if `bleUnbind` has been explicitly set.
  var hasBleUnbind: Bool {return _storage._bleUnbind != nil}
  /// Clears the value of `bleUnbind`. Subsequent reads from it will return its default value.
  mutating func clearBleUnbind() {_uniqueStorage()._bleUnbind = nil}

  var autoMeasureTime: [RtTime] {
    get {return _storage._autoMeasureTime}
    set {_uniqueStorage()._autoMeasureTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct DeviceConfSubscriber {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: UInt32 {
    get {return _storage._hash ?? 0}
    set {_uniqueStorage()._hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  var hasHash: Bool {return _storage._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  mutating func clearHash() {_uniqueStorage()._hash = nil}

  /// Each bit stands for one language_id, bit0 for English
  var supportLanguageMask: [UInt32] {
    get {return _storage._supportLanguageMask}
    set {_uniqueStorage()._supportLanguageMask = newValue}
  }

  var supportLcdGestureSwitch: Bool {
    get {return _storage._supportLcdGestureSwitch ?? false}
    set {_uniqueStorage()._supportLcdGestureSwitch = newValue}
  }
  /// Returns true if `supportLcdGestureSwitch` has been explicitly set.
  var hasSupportLcdGestureSwitch: Bool {return _storage._supportLcdGestureSwitch != nil}
  /// Clears the value of `supportLcdGestureSwitch`. Subsequent reads from it will return its default value.
  mutating func clearSupportLcdGestureSwitch() {_uniqueStorage()._supportLcdGestureSwitch = nil}

  var supportLcdGestureTime: Bool {
    get {return _storage._supportLcdGestureTime ?? false}
    set {_uniqueStorage()._supportLcdGestureTime = newValue}
  }
  /// Returns true if `supportLcdGestureTime` has been explicitly set.
  var hasSupportLcdGestureTime: Bool {return _storage._supportLcdGestureTime != nil}
  /// Clears the value of `supportLcdGestureTime`. Subsequent reads from it will return its default value.
  mutating func clearSupportLcdGestureTime() {_uniqueStorage()._supportLcdGestureTime = nil}

  var supportDistanceUnit: Bool {
    get {return _storage._supportDistanceUnit ?? false}
    set {_uniqueStorage()._supportDistanceUnit = newValue}
  }
  /// Returns true if `supportDistanceUnit` has been explicitly set.
  var hasSupportDistanceUnit: Bool {return _storage._supportDistanceUnit != nil}
  /// Clears the value of `supportDistanceUnit`. Subsequent reads from it will return its default value.
  mutating func clearSupportDistanceUnit() {_uniqueStorage()._supportDistanceUnit = nil}

  var supportTemperatureUnit: Bool {
    get {return _storage._supportTemperatureUnit ?? false}
    set {_uniqueStorage()._supportTemperatureUnit = newValue}
  }
  /// Returns true if `supportTemperatureUnit` has been explicitly set.
  var hasSupportTemperatureUnit: Bool {return _storage._supportTemperatureUnit != nil}
  /// Clears the value of `supportTemperatureUnit`. Subsequent reads from it will return its default value.
  mutating func clearSupportTemperatureUnit() {_uniqueStorage()._supportTemperatureUnit = nil}

  var supportHourFormat: Bool {
    get {return _storage._supportHourFormat ?? false}
    set {_uniqueStorage()._supportHourFormat = newValue}
  }
  /// Returns true if `supportHourFormat` has been explicitly set.
  var hasSupportHourFormat: Bool {return _storage._supportHourFormat != nil}
  /// Clears the value of `supportHourFormat`. Subsequent reads from it will return its default value.
  mutating func clearSupportHourFormat() {_uniqueStorage()._supportHourFormat = nil}

  var supportDateFormat: Bool {
    get {return _storage._supportDateFormat ?? false}
    set {_uniqueStorage()._supportDateFormat = newValue}
  }
  /// Returns true if `supportDateFormat` has been explicitly set.
  var hasSupportDateFormat: Bool {return _storage._supportDateFormat != nil}
  /// Clears the value of `supportDateFormat`. Subsequent reads from it will return its default value.
  mutating func clearSupportDateFormat() {_uniqueStorage()._supportDateFormat = nil}

  var supportAutoHeartrate: Bool {
    get {return _storage._supportAutoHeartrate ?? false}
    set {_uniqueStorage()._supportAutoHeartrate = newValue}
  }
  /// Returns true if `supportAutoHeartrate` has been explicitly set.
  var hasSupportAutoHeartrate: Bool {return _storage._supportAutoHeartrate != nil}
  /// Clears the value of `supportAutoHeartrate`. Subsequent reads from it will return its default value.
  mutating func clearSupportAutoHeartrate() {_uniqueStorage()._supportAutoHeartrate = nil}

  var supportAutoSport: Bool {
    get {return _storage._supportAutoSport ?? false}
    set {_uniqueStorage()._supportAutoSport = newValue}
  }
  /// Returns true if `supportAutoSport` has been explicitly set.
  var hasSupportAutoSport: Bool {return _storage._supportAutoSport != nil}
  /// Clears the value of `supportAutoSport`. Subsequent reads from it will return its default value.
  mutating func clearSupportAutoSport() {_uniqueStorage()._supportAutoSport = nil}

  var supportHabitualHand: Bool {
    get {return _storage._supportHabitualHand ?? false}
    set {_uniqueStorage()._supportHabitualHand = newValue}
  }
  /// Returns true if `supportHabitualHand` has been explicitly set.
  var hasSupportHabitualHand: Bool {return _storage._supportHabitualHand != nil}
  /// Clears the value of `supportHabitualHand`. Subsequent reads from it will return its default value.
  mutating func clearSupportHabitualHand() {_uniqueStorage()._supportHabitualHand = nil}

  var supportNickName: Bool {
    get {return _storage._supportNickName ?? false}
    set {_uniqueStorage()._supportNickName = newValue}
  }
  /// Returns true if `supportNickName` has been explicitly set.
  var hasSupportNickName: Bool {return _storage._supportNickName != nil}
  /// Clears the value of `supportNickName`. Subsequent reads from it will return its default value.
  mutating func clearSupportNickName() {_uniqueStorage()._supportNickName = nil}

  var supportAutoAllsensor: Bool {
    get {return _storage._supportAutoAllsensor ?? false}
    set {_uniqueStorage()._supportAutoAllsensor = newValue}
  }
  /// Returns true if `supportAutoAllsensor` has been explicitly set.
  var hasSupportAutoAllsensor: Bool {return _storage._supportAutoAllsensor != nil}
  /// Clears the value of `supportAutoAllsensor`. Subsequent reads from it will return its default value.
  mutating func clearSupportAutoAllsensor() {_uniqueStorage()._supportAutoAllsensor = nil}

  var supportHeathConfig: Bool {
    get {return _storage._supportHeathConfig ?? false}
    set {_uniqueStorage()._supportHeathConfig = newValue}
  }
  /// Returns true if `supportHeathConfig` has been explicitly set.
  var hasSupportHeathConfig: Bool {return _storage._supportHeathConfig != nil}
  /// Clears the value of `supportHeathConfig`. Subsequent reads from it will return its default value.
  mutating func clearSupportHeathConfig() {_uniqueStorage()._supportHeathConfig = nil}

  var supportHealthSleep: Bool {
    get {return _storage._supportHealthSleep ?? false}
    set {_uniqueStorage()._supportHealthSleep = newValue}
  }
  /// Returns true if `supportHealthSleep` has been explicitly set.
  var hasSupportHealthSleep: Bool {return _storage._supportHealthSleep != nil}
  /// Clears the value of `supportHealthSleep`. Subsequent reads from it will return its default value.
  mutating func clearSupportHealthSleep() {_uniqueStorage()._supportHealthSleep = nil}

  var supportBacklightTime: Bool {
    get {return _storage._supportBacklightTime ?? false}
    set {_uniqueStorage()._supportBacklightTime = newValue}
  }
  /// Returns true if `supportBacklightTime` has been explicitly set.
  var hasSupportBacklightTime: Bool {return _storage._supportBacklightTime != nil}
  /// Clears the value of `supportBacklightTime`. Subsequent reads from it will return its default value.
  mutating func clearSupportBacklightTime() {_uniqueStorage()._supportBacklightTime = nil}

  var supportGestureSensitivity: Bool {
    get {return _storage._supportGestureSensitivity ?? false}
    set {_uniqueStorage()._supportGestureSensitivity = newValue}
  }
  /// Returns true if `supportGestureSensitivity` has been explicitly set.
  var hasSupportGestureSensitivity: Bool {return _storage._supportGestureSensitivity != nil}
  /// Clears the value of `supportGestureSensitivity`. Subsequent reads from it will return its default value.
  mutating func clearSupportGestureSensitivity() {_uniqueStorage()._supportGestureSensitivity = nil}

  var supportStepsSensitivity: Bool {
    get {return _storage._supportStepsSensitivity ?? false}
    set {_uniqueStorage()._supportStepsSensitivity = newValue}
  }
  /// Returns true if `supportStepsSensitivity` has been explicitly set.
  var hasSupportStepsSensitivity: Bool {return _storage._supportStepsSensitivity != nil}
  /// Clears the value of `supportStepsSensitivity`. Subsequent reads from it will return its default value.
  mutating func clearSupportStepsSensitivity() {_uniqueStorage()._supportStepsSensitivity = nil}

  var supportPowerOff: Bool {
    get {return _storage._supportPowerOff ?? false}
    set {_uniqueStorage()._supportPowerOff = newValue}
  }
  /// Returns true if `supportPowerOff` has been explicitly set.
  var hasSupportPowerOff: Bool {return _storage._supportPowerOff != nil}
  /// Clears the value of `supportPowerOff`. Subsequent reads from it will return its default value.
  mutating func clearSupportPowerOff() {_uniqueStorage()._supportPowerOff = nil}

  var supportFactoryReset: Bool {
    get {return _storage._supportFactoryReset ?? false}
    set {_uniqueStorage()._supportFactoryReset = newValue}
  }
  /// Returns true if `supportFactoryReset` has been explicitly set.
  var hasSupportFactoryReset: Bool {return _storage._supportFactoryReset != nil}
  /// Clears the value of `supportFactoryReset`. Subsequent reads from it will return its default value.
  mutating func clearSupportFactoryReset() {_uniqueStorage()._supportFactoryReset = nil}

  var supportBleUnbind: Bool {
    get {return _storage._supportBleUnbind ?? false}
    set {_uniqueStorage()._supportBleUnbind = newValue}
  }
  /// Returns true if `supportBleUnbind` has been explicitly set.
  var hasSupportBleUnbind: Bool {return _storage._supportBleUnbind != nil}
  /// Clears the value of `supportBleUnbind`. Subsequent reads from it will return its default value.
  mutating func clearSupportBleUnbind() {_uniqueStorage()._supportBleUnbind = nil}

  var supportAutoMeasureTime: Bool {
    get {return _storage._supportAutoMeasureTime ?? false}
    set {_uniqueStorage()._supportAutoMeasureTime = newValue}
  }
  /// Returns true if `supportAutoMeasureTime` has been explicitly set.
  var hasSupportAutoMeasureTime: Bool {return _storage._supportAutoMeasureTime != nil}
  /// Clears the value of `supportAutoMeasureTime`. Subsequent reads from it will return its default value.
  mutating func clearSupportAutoMeasureTime() {_uniqueStorage()._supportAutoMeasureTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension DeviceLanuage: @unchecked Sendable {}
extension DeviceLcdGs: @unchecked Sendable {}
extension HealthDataConfig: @unchecked Sendable {}
extension DeviceConfNotification: @unchecked Sendable {}
extension DeviceConfSubscriber: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension DeviceLanuage: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "English"),
    1: .same(proto: "Chinese"),
    2: .same(proto: "Italian"),
    3: .same(proto: "Japanese"),
    4: .same(proto: "France"),
    5: .same(proto: "German"),
    6: .same(proto: "Portuguese"),
    7: .same(proto: "Spanish"),
    8: .same(proto: "Russian"),
    9: .same(proto: "Korean"),
    10: .same(proto: "Arabic"),
    11: .same(proto: "Vietnam"),
    12: .same(proto: "Polish"),
    13: .same(proto: "Romanian"),
    14: .same(proto: "Swedish"),
    15: .same(proto: "Thai"),
    16: .same(proto: "Turkish"),
    17: .same(proto: "Denish"),
    18: .same(proto: "Ukrainian"),
    19: .same(proto: "Norwegian"),
    20: .same(proto: "Dutch"),
    21: .same(proto: "Czech"),
    22: .same(proto: "Chinese_Tc"),
    23: .same(proto: "Indonesian"),
    255: .same(proto: "Bare"),
  ]
}

extension DeviceLcdGs: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceLcdGs"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "lcd_gs_start_hour"),
    2: .standard(proto: "lcd_gs_end_hour"),
  ]

  public var isInitialized: Bool {
    if self._lcdGsStartHour == nil {return false}
    if self._lcdGsEndHour == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._lcdGsStartHour) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._lcdGsEndHour) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._lcdGsStartHour {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lcdGsEndHour {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeviceLcdGs, rhs: DeviceLcdGs) -> Bool {
    if lhs._lcdGsStartHour != rhs._lcdGsStartHour {return false}
    if lhs._lcdGsEndHour != rhs._lcdGsEndHour {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthDataConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HealthDataConfig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ecg_config"),
    2: .standard(proto: "fatigue_config"),
    3: .standard(proto: "bp_config"),
    4: .standard(proto: "af_config"),
    5: .standard(proto: "bioz_config"),
    6: .standard(proto: "mood_config"),
    7: .standard(proto: "breathrate_config"),
    8: .standard(proto: "mdt_config"),
    9: .standard(proto: "spo2_config"),
    10: .standard(proto: "temperature_config"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._ecgConfig) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._fatigueConfig) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._bpConfig) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._afConfig) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._biozConfig) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._moodConfig) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._breathrateConfig) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._mdtConfig) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._spo2Config) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self._temperatureConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._ecgConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fatigueConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._bpConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._afConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._biozConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._moodConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._breathrateConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._mdtConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._spo2Config {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._temperatureConfig {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HealthDataConfig, rhs: HealthDataConfig) -> Bool {
    if lhs._ecgConfig != rhs._ecgConfig {return false}
    if lhs._fatigueConfig != rhs._fatigueConfig {return false}
    if lhs._bpConfig != rhs._bpConfig {return false}
    if lhs._afConfig != rhs._afConfig {return false}
    if lhs._biozConfig != rhs._biozConfig {return false}
    if lhs._moodConfig != rhs._moodConfig {return false}
    if lhs._breathrateConfig != rhs._breathrateConfig {return false}
    if lhs._mdtConfig != rhs._mdtConfig {return false}
    if lhs._spo2Config != rhs._spo2Config {return false}
    if lhs._temperatureConfig != rhs._temperatureConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeviceConfNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceConfNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .standard(proto: "language_id"),
    3: .standard(proto: "lcd_gs_switch"),
    4: .standard(proto: "lcd_gs_time"),
    5: .standard(proto: "distance_unit"),
    6: .standard(proto: "temperature_unit"),
    7: .standard(proto: "hour_format"),
    8: .standard(proto: "date_format"),
    9: .standard(proto: "auto_heartrate"),
    10: .standard(proto: "auto_sport"),
    11: .standard(proto: "habitual_hand"),
    12: .standard(proto: "nick_name"),
    13: .standard(proto: "auto_allsensor"),
    14: .standard(proto: "heath_config"),
    15: .standard(proto: "health_sleep"),
    16: .standard(proto: "backlight_time"),
    17: .standard(proto: "gesture_sensitivity"),
    18: .standard(proto: "steps_sensitivity"),
    19: .standard(proto: "power_off"),
    20: .standard(proto: "Factory_Reset"),
    21: .standard(proto: "ble_unbind"),
    22: .standard(proto: "auto_measure_time"),
  ]

  fileprivate class _StorageClass {
    var _hash: UInt32? = nil
    var _languageID: DeviceLanuage? = nil
    var _lcdGsSwitch: Bool? = nil
    var _lcdGsTime: DeviceLcdGs? = nil
    var _distanceUnit: Bool? = nil
    var _temperatureUnit: Bool? = nil
    var _hourFormat: Bool? = nil
    var _dateFormat: Bool? = nil
    var _autoHeartrate: Bool? = nil
    var _autoSport: Bool? = nil
    var _habitualHand: Bool? = nil
    var _nickName: String? = nil
    var _autoAllsensor: Bool? = nil
    var _heathConfig: HealthDataConfig? = nil
    var _healthSleep: Bool? = nil
    var _backlightTime: UInt32? = nil
    var _gestureSensitivity: UInt32? = nil
    var _stepsSensitivity: UInt32? = nil
    var _powerOff: Bool? = nil
    var _factoryReset: Bool? = nil
    var _bleUnbind: Bool? = nil
    var _autoMeasureTime: [RtTime] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _hash = source._hash
      _languageID = source._languageID
      _lcdGsSwitch = source._lcdGsSwitch
      _lcdGsTime = source._lcdGsTime
      _distanceUnit = source._distanceUnit
      _temperatureUnit = source._temperatureUnit
      _hourFormat = source._hourFormat
      _dateFormat = source._dateFormat
      _autoHeartrate = source._autoHeartrate
      _autoSport = source._autoSport
      _habitualHand = source._habitualHand
      _nickName = source._nickName
      _autoAllsensor = source._autoAllsensor
      _heathConfig = source._heathConfig
      _healthSleep = source._healthSleep
      _backlightTime = source._backlightTime
      _gestureSensitivity = source._gestureSensitivity
      _stepsSensitivity = source._stepsSensitivity
      _powerOff = source._powerOff
      _factoryReset = source._factoryReset
      _bleUnbind = source._bleUnbind
      _autoMeasureTime = source._autoMeasureTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._hash == nil {return false}
      if let v = _storage._lcdGsTime, !v.isInitialized {return false}
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._autoMeasureTime) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularFixed32Field(value: &_storage._hash) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._languageID) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._lcdGsSwitch) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._lcdGsTime) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._distanceUnit) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._temperatureUnit) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._hourFormat) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._dateFormat) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._autoHeartrate) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._autoSport) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._habitualHand) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._nickName) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._autoAllsensor) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._heathConfig) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._healthSleep) }()
        case 16: try { try decoder.decodeSingularFixed32Field(value: &_storage._backlightTime) }()
        case 17: try { try decoder.decodeSingularFixed32Field(value: &_storage._gestureSensitivity) }()
        case 18: try { try decoder.decodeSingularFixed32Field(value: &_storage._stepsSensitivity) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._powerOff) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._factoryReset) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._bleUnbind) }()
        case 22: try { try decoder.decodeRepeatedMessageField(value: &_storage._autoMeasureTime) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._hash {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._languageID {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._lcdGsSwitch {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._lcdGsTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._distanceUnit {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._temperatureUnit {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._hourFormat {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._dateFormat {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._autoHeartrate {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._autoSport {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._habitualHand {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._nickName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._autoAllsensor {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._heathConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._healthSleep {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._backlightTime {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._gestureSensitivity {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._stepsSensitivity {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._powerOff {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._factoryReset {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._bleUnbind {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
      } }()
      if !_storage._autoMeasureTime.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._autoMeasureTime, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeviceConfNotification, rhs: DeviceConfNotification) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._hash != rhs_storage._hash {return false}
        if _storage._languageID != rhs_storage._languageID {return false}
        if _storage._lcdGsSwitch != rhs_storage._lcdGsSwitch {return false}
        if _storage._lcdGsTime != rhs_storage._lcdGsTime {return false}
        if _storage._distanceUnit != rhs_storage._distanceUnit {return false}
        if _storage._temperatureUnit != rhs_storage._temperatureUnit {return false}
        if _storage._hourFormat != rhs_storage._hourFormat {return false}
        if _storage._dateFormat != rhs_storage._dateFormat {return false}
        if _storage._autoHeartrate != rhs_storage._autoHeartrate {return false}
        if _storage._autoSport != rhs_storage._autoSport {return false}
        if _storage._habitualHand != rhs_storage._habitualHand {return false}
        if _storage._nickName != rhs_storage._nickName {return false}
        if _storage._autoAllsensor != rhs_storage._autoAllsensor {return false}
        if _storage._heathConfig != rhs_storage._heathConfig {return false}
        if _storage._healthSleep != rhs_storage._healthSleep {return false}
        if _storage._backlightTime != rhs_storage._backlightTime {return false}
        if _storage._gestureSensitivity != rhs_storage._gestureSensitivity {return false}
        if _storage._stepsSensitivity != rhs_storage._stepsSensitivity {return false}
        if _storage._powerOff != rhs_storage._powerOff {return false}
        if _storage._factoryReset != rhs_storage._factoryReset {return false}
        if _storage._bleUnbind != rhs_storage._bleUnbind {return false}
        if _storage._autoMeasureTime != rhs_storage._autoMeasureTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DeviceConfSubscriber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceConfSubscriber"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .standard(proto: "support_language_mask"),
    3: .standard(proto: "support_lcd_gesture_switch"),
    4: .standard(proto: "support_lcd_gesture_time"),
    5: .standard(proto: "support_distance_unit"),
    6: .standard(proto: "support_temperature_unit"),
    7: .standard(proto: "support_hour_format"),
    8: .standard(proto: "support_date_format"),
    9: .standard(proto: "support_auto_heartrate"),
    10: .standard(proto: "support_auto_sport"),
    11: .standard(proto: "support_habitual_hand"),
    12: .standard(proto: "support_nick_name"),
    13: .standard(proto: "support_auto_allsensor"),
    14: .standard(proto: "support_heath_config"),
    15: .standard(proto: "support_health_sleep"),
    16: .standard(proto: "support_backlight_time"),
    17: .standard(proto: "support_gesture_sensitivity"),
    18: .standard(proto: "support_steps_sensitivity"),
    19: .standard(proto: "support_power_off"),
    20: .standard(proto: "support_Factory_Reset"),
    21: .standard(proto: "support_ble_unbind"),
    22: .standard(proto: "support_auto_measure_time"),
  ]

  fileprivate class _StorageClass {
    var _hash: UInt32? = nil
    var _supportLanguageMask: [UInt32] = []
    var _supportLcdGestureSwitch: Bool? = nil
    var _supportLcdGestureTime: Bool? = nil
    var _supportDistanceUnit: Bool? = nil
    var _supportTemperatureUnit: Bool? = nil
    var _supportHourFormat: Bool? = nil
    var _supportDateFormat: Bool? = nil
    var _supportAutoHeartrate: Bool? = nil
    var _supportAutoSport: Bool? = nil
    var _supportHabitualHand: Bool? = nil
    var _supportNickName: Bool? = nil
    var _supportAutoAllsensor: Bool? = nil
    var _supportHeathConfig: Bool? = nil
    var _supportHealthSleep: Bool? = nil
    var _supportBacklightTime: Bool? = nil
    var _supportGestureSensitivity: Bool? = nil
    var _supportStepsSensitivity: Bool? = nil
    var _supportPowerOff: Bool? = nil
    var _supportFactoryReset: Bool? = nil
    var _supportBleUnbind: Bool? = nil
    var _supportAutoMeasureTime: Bool? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _hash = source._hash
      _supportLanguageMask = source._supportLanguageMask
      _supportLcdGestureSwitch = source._supportLcdGestureSwitch
      _supportLcdGestureTime = source._supportLcdGestureTime
      _supportDistanceUnit = source._supportDistanceUnit
      _supportTemperatureUnit = source._supportTemperatureUnit
      _supportHourFormat = source._supportHourFormat
      _supportDateFormat = source._supportDateFormat
      _supportAutoHeartrate = source._supportAutoHeartrate
      _supportAutoSport = source._supportAutoSport
      _supportHabitualHand = source._supportHabitualHand
      _supportNickName = source._supportNickName
      _supportAutoAllsensor = source._supportAutoAllsensor
      _supportHeathConfig = source._supportHeathConfig
      _supportHealthSleep = source._supportHealthSleep
      _supportBacklightTime = source._supportBacklightTime
      _supportGestureSensitivity = source._supportGestureSensitivity
      _supportStepsSensitivity = source._supportStepsSensitivity
      _supportPowerOff = source._supportPowerOff
      _supportFactoryReset = source._supportFactoryReset
      _supportBleUnbind = source._supportBleUnbind
      _supportAutoMeasureTime = source._supportAutoMeasureTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._hash == nil {return false}
      if _storage._supportLcdGestureSwitch == nil {return false}
      if _storage._supportLcdGestureTime == nil {return false}
      if _storage._supportDistanceUnit == nil {return false}
      if _storage._supportTemperatureUnit == nil {return false}
      if _storage._supportHourFormat == nil {return false}
      if _storage._supportDateFormat == nil {return false}
      if _storage._supportAutoHeartrate == nil {return false}
      if _storage._supportAutoSport == nil {return false}
      if _storage._supportHabitualHand == nil {return false}
      if _storage._supportNickName == nil {return false}
      if _storage._supportAutoAllsensor == nil {return false}
      if _storage._supportHeathConfig == nil {return false}
      if _storage._supportHealthSleep == nil {return false}
      if _storage._supportBacklightTime == nil {return false}
      if _storage._supportGestureSensitivity == nil {return false}
      if _storage._supportStepsSensitivity == nil {return false}
      if _storage._supportPowerOff == nil {return false}
      if _storage._supportFactoryReset == nil {return false}
      if _storage._supportBleUnbind == nil {return false}
      if _storage._supportAutoMeasureTime == nil {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularFixed32Field(value: &_storage._hash) }()
        case 2: try { try decoder.decodeRepeatedFixed32Field(value: &_storage._supportLanguageMask) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._supportLcdGestureSwitch) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._supportLcdGestureTime) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._supportDistanceUnit) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._supportTemperatureUnit) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._supportHourFormat) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._supportDateFormat) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._supportAutoHeartrate) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._supportAutoSport) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._supportHabitualHand) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._supportNickName) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._supportAutoAllsensor) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._supportHeathConfig) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._supportHealthSleep) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._supportBacklightTime) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._supportGestureSensitivity) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._supportStepsSensitivity) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._supportPowerOff) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._supportFactoryReset) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._supportBleUnbind) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._supportAutoMeasureTime) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._hash {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
      } }()
      if !_storage._supportLanguageMask.isEmpty {
        try visitor.visitPackedFixed32Field(value: _storage._supportLanguageMask, fieldNumber: 2)
      }
      try { if let v = _storage._supportLcdGestureSwitch {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._supportLcdGestureTime {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._supportDistanceUnit {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._supportTemperatureUnit {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._supportHourFormat {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._supportDateFormat {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._supportAutoHeartrate {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._supportAutoSport {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._supportHabitualHand {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._supportNickName {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._supportAutoAllsensor {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._supportHeathConfig {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._supportHealthSleep {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._supportBacklightTime {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._supportGestureSensitivity {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._supportStepsSensitivity {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._supportPowerOff {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._supportFactoryReset {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._supportBleUnbind {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._supportAutoMeasureTime {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeviceConfSubscriber, rhs: DeviceConfSubscriber) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._hash != rhs_storage._hash {return false}
        if _storage._supportLanguageMask != rhs_storage._supportLanguageMask {return false}
        if _storage._supportLcdGestureSwitch != rhs_storage._supportLcdGestureSwitch {return false}
        if _storage._supportLcdGestureTime != rhs_storage._supportLcdGestureTime {return false}
        if _storage._supportDistanceUnit != rhs_storage._supportDistanceUnit {return false}
        if _storage._supportTemperatureUnit != rhs_storage._supportTemperatureUnit {return false}
        if _storage._supportHourFormat != rhs_storage._supportHourFormat {return false}
        if _storage._supportDateFormat != rhs_storage._supportDateFormat {return false}
        if _storage._supportAutoHeartrate != rhs_storage._supportAutoHeartrate {return false}
        if _storage._supportAutoSport != rhs_storage._supportAutoSport {return false}
        if _storage._supportHabitualHand != rhs_storage._supportHabitualHand {return false}
        if _storage._supportNickName != rhs_storage._supportNickName {return false}
        if _storage._supportAutoAllsensor != rhs_storage._supportAutoAllsensor {return false}
        if _storage._supportHeathConfig != rhs_storage._supportHeathConfig {return false}
        if _storage._supportHealthSleep != rhs_storage._supportHealthSleep {return false}
        if _storage._supportBacklightTime != rhs_storage._supportBacklightTime {return false}
        if _storage._supportGestureSensitivity != rhs_storage._supportGestureSensitivity {return false}
        if _storage._supportStepsSensitivity != rhs_storage._supportStepsSensitivity {return false}
        if _storage._supportPowerOff != rhs_storage._supportPowerOff {return false}
        if _storage._supportFactoryReset != rhs_storage._supportFactoryReset {return false}
        if _storage._supportBleUnbind != rhs_storage._supportBleUnbind {return false}
        if _storage._supportAutoMeasureTime != rhs_storage._supportAutoMeasureTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
