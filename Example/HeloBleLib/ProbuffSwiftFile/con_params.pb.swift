// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: con_params.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct ConParamsUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///the minimum transmission unit of rx in bytes, update local value when peer is smaller
  var mtu: UInt32 {
    get {return _mtu ?? 0}
    set {_mtu = newValue}
  }
  /// Returns true if `mtu` has been explicitly set.
  var hasMtu: Bool {return self._mtu != nil}
  /// Clears the value of `mtu`. Subsequent reads from it will return its default value.
  mutating func clearMtu() {self._mtu = nil}

  ///the tx interval in unit of millisecond, update local value when peer is larger
  var intervalMs: UInt32 {
    get {return _intervalMs ?? 0}
    set {_intervalMs = newValue}
  }
  /// Returns true if `intervalMs` has been explicitly set.
  var hasIntervalMs: Bool {return self._intervalMs != nil}
  /// Clears the value of `intervalMs`. Subsequent reads from it will return its default value.
  mutating func clearIntervalMs() {self._intervalMs = nil}

  ///the link supervisor timeout in millisecond, update local value when peer is larger
  var timeoutMs: UInt32 {
    get {return _timeoutMs ?? 0}
    set {_timeoutMs = newValue}
  }
  /// Returns true if `timeoutMs` has been explicitly set.
  var hasTimeoutMs: Bool {return self._timeoutMs != nil}
  /// Clears the value of `timeoutMs`. Subsequent reads from it will return its default value.
  mutating func clearTimeoutMs() {self._timeoutMs = nil}

  ///the max size of 'dt' packet
  var maxSize: UInt32 {
    get {return _maxSize ?? 512}
    set {_maxSize = newValue}
  }
  /// Returns true if `maxSize` has been explicitly set.
  var hasMaxSize: Bool {return self._maxSize != nil}
  /// Clears the value of `maxSize`. Subsequent reads from it will return its default value.
  mutating func clearMaxSize() {self._maxSize = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mtu: UInt32? = nil
  fileprivate var _intervalMs: UInt32? = nil
  fileprivate var _timeoutMs: UInt32? = nil
  fileprivate var _maxSize: UInt32? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension ConParamsUpdate: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ConParamsUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ConParamsUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mtu"),
    2: .standard(proto: "interval_ms"),
    3: .standard(proto: "timeout_ms"),
    4: .standard(proto: "max_size"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._mtu) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._intervalMs) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._timeoutMs) }()
      case 4: try { try decoder.decodeSingularFixed32Field(value: &self._maxSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mtu {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._intervalMs {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._timeoutMs {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._maxSize {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ConParamsUpdate, rhs: ConParamsUpdate) -> Bool {
    if lhs._mtu != rhs._mtu {return false}
    if lhs._intervalMs != rhs._intervalMs {return false}
    if lhs._timeoutMs != rhs._timeoutMs {return false}
    if lhs._maxSize != rhs._maxSize {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
