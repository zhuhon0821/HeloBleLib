// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sedentariness.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum SedtOperation: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case set // = 0
  case clear // = 1

  init() {
    self = .set
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .set
    case 1: self = .clear
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .set: return 0
    case .clear: return 1
    }
  }

}

#if swift(>=4.2)

extension SedtOperation: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct Sedentariness {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// TRUE: repeat every week
  var `repeat`: Bool {
    get {return _repeat ?? false}
    set {_repeat = newValue}
  }
  /// Returns true if ``repeat`` has been explicitly set.
  var hasRepeat: Bool {return self._repeat != nil}
  /// Clears the value of ``repeat``. Subsequent reads from it will return its default value.
  mutating func clearRepeat() {self._repeat = nil}

  /// TRUE: active on this day
  var monday: Bool {
    get {return _monday ?? false}
    set {_monday = newValue}
  }
  /// Returns true if `monday` has been explicitly set.
  var hasMonday: Bool {return self._monday != nil}
  /// Clears the value of `monday`. Subsequent reads from it will return its default value.
  mutating func clearMonday() {self._monday = nil}

  /// TRUE: active on this day
  var tuesday: Bool {
    get {return _tuesday ?? false}
    set {_tuesday = newValue}
  }
  /// Returns true if `tuesday` has been explicitly set.
  var hasTuesday: Bool {return self._tuesday != nil}
  /// Clears the value of `tuesday`. Subsequent reads from it will return its default value.
  mutating func clearTuesday() {self._tuesday = nil}

  /// TRUE: active on this day
  var wednesday: Bool {
    get {return _wednesday ?? false}
    set {_wednesday = newValue}
  }
  /// Returns true if `wednesday` has been explicitly set.
  var hasWednesday: Bool {return self._wednesday != nil}
  /// Clears the value of `wednesday`. Subsequent reads from it will return its default value.
  mutating func clearWednesday() {self._wednesday = nil}

  /// TRUE: active on this day
  var thursday: Bool {
    get {return _thursday ?? false}
    set {_thursday = newValue}
  }
  /// Returns true if `thursday` has been explicitly set.
  var hasThursday: Bool {return self._thursday != nil}
  /// Clears the value of `thursday`. Subsequent reads from it will return its default value.
  mutating func clearThursday() {self._thursday = nil}

  /// TRUE: active on this day
  var friday: Bool {
    get {return _friday ?? false}
    set {_friday = newValue}
  }
  /// Returns true if `friday` has been explicitly set.
  var hasFriday: Bool {return self._friday != nil}
  /// Clears the value of `friday`. Subsequent reads from it will return its default value.
  mutating func clearFriday() {self._friday = nil}

  /// TRUE: active on this day
  var saturday: Bool {
    get {return _saturday ?? false}
    set {_saturday = newValue}
  }
  /// Returns true if `saturday` has been explicitly set.
  var hasSaturday: Bool {return self._saturday != nil}
  /// Clears the value of `saturday`. Subsequent reads from it will return its default value.
  mutating func clearSaturday() {self._saturday = nil}

  /// TRUE: active on this day
  var sunday: Bool {
    get {return _sunday ?? false}
    set {_sunday = newValue}
  }
  /// Returns true if `sunday` has been explicitly set.
  var hasSunday: Bool {return self._sunday != nil}
  /// Clears the value of `sunday`. Subsequent reads from it will return its default value.
  mutating func clearSunday() {self._sunday = nil}

  /// 0~23
  var startHour: UInt32 {
    get {return _startHour ?? 0}
    set {_startHour = newValue}
  }
  /// Returns true if `startHour` has been explicitly set.
  var hasStartHour: Bool {return self._startHour != nil}
  /// Clears the value of `startHour`. Subsequent reads from it will return its default value.
  mutating func clearStartHour() {self._startHour = nil}

  /// 0~23
  var endHour: UInt32 {
    get {return _endHour ?? 0}
    set {_endHour = newValue}
  }
  /// Returns true if `endHour` has been explicitly set.
  var hasEndHour: Bool {return self._endHour != nil}
  /// Clears the value of `endHour`. Subsequent reads from it will return its default value.
  mutating func clearEndHour() {self._endHour = nil}

  /// 0~1440
  var duration: UInt32 {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var threshold: UInt32 {
    get {return _threshold ?? 0}
    set {_threshold = newValue}
  }
  /// Returns true if `threshold` has been explicitly set.
  var hasThreshold: Bool {return self._threshold != nil}
  /// Clears the value of `threshold`. Subsequent reads from it will return its default value.
  mutating func clearThreshold() {self._threshold = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _repeat: Bool? = nil
  fileprivate var _monday: Bool? = nil
  fileprivate var _tuesday: Bool? = nil
  fileprivate var _wednesday: Bool? = nil
  fileprivate var _thursday: Bool? = nil
  fileprivate var _friday: Bool? = nil
  fileprivate var _saturday: Bool? = nil
  fileprivate var _sunday: Bool? = nil
  fileprivate var _startHour: UInt32? = nil
  fileprivate var _endHour: UInt32? = nil
  fileprivate var _duration: UInt32? = nil
  fileprivate var _threshold: UInt32? = nil
}

struct SedtGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: UInt32 {
    get {return _hash ?? 0}
    set {_hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  var hasHash: Bool {return self._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  mutating func clearHash() {self._hash = nil}

  var sedentariness: [Sedentariness] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hash: UInt32? = nil
}

struct SedtNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operation: SedtOperation {
    get {return _operation ?? .set}
    set {_operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  var hasOperation: Bool {return self._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  mutating func clearOperation() {self._operation = nil}

  /// for SedtOperation::SET
  var group: SedtGroup {
    get {return _group ?? SedtGroup()}
    set {_group = newValue}
  }
  /// Returns true if `group` has been explicitly set.
  var hasGroup: Bool {return self._group != nil}
  /// Clears the value of `group`. Subsequent reads from it will return its default value.
  mutating func clearGroup() {self._group = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _operation: SedtOperation? = nil
  fileprivate var _group: SedtGroup? = nil
}

struct SedtConfirm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operation: SedtOperation {
    get {return _operation ?? .set}
    set {_operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  var hasOperation: Bool {return self._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  mutating func clearOperation() {self._operation = nil}

  var ret: Bool {
    get {return _ret ?? false}
    set {_ret = newValue}
  }
  /// Returns true if `ret` has been explicitly set.
  var hasRet: Bool {return self._ret != nil}
  /// Clears the value of `ret`. Subsequent reads from it will return its default value.
  mutating func clearRet() {self._ret = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _operation: SedtOperation? = nil
  fileprivate var _ret: Bool? = nil
}

struct SedtSubscriber {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: UInt32 {
    get {return _hash ?? 0}
    set {_hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  var hasHash: Bool {return self._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  mutating func clearHash() {self._hash = nil}

  /// in response of SedtNotification::operation
  var confirm: SedtConfirm {
    get {return _confirm ?? SedtConfirm()}
    set {_confirm = newValue}
  }
  /// Returns true if `confirm` has been explicitly set.
  var hasConfirm: Bool {return self._confirm != nil}
  /// Clears the value of `confirm`. Subsequent reads from it will return its default value.
  mutating func clearConfirm() {self._confirm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hash: UInt32? = nil
  fileprivate var _confirm: SedtConfirm? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SedtOperation: @unchecked Sendable {}
extension Sedentariness: @unchecked Sendable {}
extension SedtGroup: @unchecked Sendable {}
extension SedtNotification: @unchecked Sendable {}
extension SedtConfirm: @unchecked Sendable {}
extension SedtSubscriber: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SedtOperation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SET"),
    1: .same(proto: "CLEAR"),
  ]
}

extension Sedentariness: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Sedentariness"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "repeat"),
    2: .same(proto: "monday"),
    3: .same(proto: "tuesday"),
    4: .same(proto: "wednesday"),
    5: .same(proto: "thursday"),
    6: .same(proto: "friday"),
    7: .same(proto: "saturday"),
    8: .same(proto: "sunday"),
    9: .standard(proto: "start_hour"),
    10: .standard(proto: "end_hour"),
    11: .same(proto: "duration"),
    12: .same(proto: "threshold"),
  ]

  public var isInitialized: Bool {
    if self._repeat == nil {return false}
    if self._monday == nil {return false}
    if self._tuesday == nil {return false}
    if self._wednesday == nil {return false}
    if self._thursday == nil {return false}
    if self._friday == nil {return false}
    if self._saturday == nil {return false}
    if self._sunday == nil {return false}
    if self._startHour == nil {return false}
    if self._endHour == nil {return false}
    if self._duration == nil {return false}
    if self._threshold == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._repeat) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._monday) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._tuesday) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._wednesday) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._thursday) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._friday) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._saturday) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._sunday) }()
      case 9: try { try decoder.decodeSingularFixed32Field(value: &self._startHour) }()
      case 10: try { try decoder.decodeSingularFixed32Field(value: &self._endHour) }()
      case 11: try { try decoder.decodeSingularFixed32Field(value: &self._duration) }()
      case 12: try { try decoder.decodeSingularFixed32Field(value: &self._threshold) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._repeat {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._monday {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._tuesday {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._wednesday {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._thursday {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._friday {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._saturday {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._sunday {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._startHour {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._endHour {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._threshold {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Sedentariness, rhs: Sedentariness) -> Bool {
    if lhs._repeat != rhs._repeat {return false}
    if lhs._monday != rhs._monday {return false}
    if lhs._tuesday != rhs._tuesday {return false}
    if lhs._wednesday != rhs._wednesday {return false}
    if lhs._thursday != rhs._thursday {return false}
    if lhs._friday != rhs._friday {return false}
    if lhs._saturday != rhs._saturday {return false}
    if lhs._sunday != rhs._sunday {return false}
    if lhs._startHour != rhs._startHour {return false}
    if lhs._endHour != rhs._endHour {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._threshold != rhs._threshold {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SedtGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SedtGroup"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "sedentariness"),
  ]

  public var isInitialized: Bool {
    if self._hash == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.sedentariness) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._hash) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.sedentariness) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._hash {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    if !self.sedentariness.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sedentariness, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SedtGroup, rhs: SedtGroup) -> Bool {
    if lhs._hash != rhs._hash {return false}
    if lhs.sedentariness != rhs.sedentariness {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SedtNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SedtNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .same(proto: "group"),
  ]

  public var isInitialized: Bool {
    if self._operation == nil {return false}
    if let v = self._group, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._operation) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._group) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._operation {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._group {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SedtNotification, rhs: SedtNotification) -> Bool {
    if lhs._operation != rhs._operation {return false}
    if lhs._group != rhs._group {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SedtConfirm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SedtConfirm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .same(proto: "ret"),
  ]

  public var isInitialized: Bool {
    if self._operation == nil {return false}
    if self._ret == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._operation) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._ret) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._operation {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._ret {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SedtConfirm, rhs: SedtConfirm) -> Bool {
    if lhs._operation != rhs._operation {return false}
    if lhs._ret != rhs._ret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SedtSubscriber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SedtSubscriber"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "confirm"),
  ]

  public var isInitialized: Bool {
    if self._hash == nil {return false}
    if let v = self._confirm, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._hash) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._confirm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._hash {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._confirm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SedtSubscriber, rhs: SedtSubscriber) -> Bool {
    if lhs._hash != rhs._hash {return false}
    if lhs._confirm != rhs._confirm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
