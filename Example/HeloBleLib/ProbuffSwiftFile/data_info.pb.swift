// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: data_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct RtDataInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var supportTime: Bool {
    get {return _supportTime ?? false}
    set {_supportTime = newValue}
  }
  /// Returns true if `supportTime` has been explicitly set.
  var hasSupportTime: Bool {return self._supportTime != nil}
  /// Clears the value of `supportTime`. Subsequent reads from it will return its default value.
  mutating func clearSupportTime() {self._supportTime = nil}

  var supportBattery: Bool {
    get {return _supportBattery ?? false}
    set {_supportBattery = newValue}
  }
  /// Returns true if `supportBattery` has been explicitly set.
  var hasSupportBattery: Bool {return self._supportBattery != nil}
  /// Clears the value of `supportBattery`. Subsequent reads from it will return its default value.
  mutating func clearSupportBattery() {self._supportBattery = nil}

  var supportHealth: Bool {
    get {return _supportHealth ?? false}
    set {_supportHealth = newValue}
  }
  /// Returns true if `supportHealth` has been explicitly set.
  var hasSupportHealth: Bool {return self._supportHealth != nil}
  /// Clears the value of `supportHealth`. Subsequent reads from it will return its default value.
  mutating func clearSupportHealth() {self._supportHealth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _supportTime: Bool? = nil
  fileprivate var _supportBattery: Bool? = nil
  fileprivate var _supportHealth: Bool? = nil
}

struct HisDataInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var supportHealth: Bool {
    get {return _supportHealth ?? false}
    set {_supportHealth = newValue}
  }
  /// Returns true if `supportHealth` has been explicitly set.
  var hasSupportHealth: Bool {return self._supportHealth != nil}
  /// Clears the value of `supportHealth`. Subsequent reads from it will return its default value.
  mutating func clearSupportHealth() {self._supportHealth = nil}

  var supportGnss: Bool {
    get {return _supportGnss ?? false}
    set {_supportGnss = newValue}
  }
  /// Returns true if `supportGnss` has been explicitly set.
  var hasSupportGnss: Bool {return self._supportGnss != nil}
  /// Clears the value of `supportGnss`. Subsequent reads from it will return its default value.
  mutating func clearSupportGnss() {self._supportGnss = nil}

  var supportEcg: Bool {
    get {return _supportEcg ?? false}
    set {_supportEcg = newValue}
  }
  /// Returns true if `supportEcg` has been explicitly set.
  var hasSupportEcg: Bool {return self._supportEcg != nil}
  /// Clears the value of `supportEcg`. Subsequent reads from it will return its default value.
  mutating func clearSupportEcg() {self._supportEcg = nil}

  var supportPpg: Bool {
    get {return _supportPpg ?? false}
    set {_supportPpg = newValue}
  }
  /// Returns true if `supportPpg` has been explicitly set.
  var hasSupportPpg: Bool {return self._supportPpg != nil}
  /// Clears the value of `supportPpg`. Subsequent reads from it will return its default value.
  mutating func clearSupportPpg() {self._supportPpg = nil}

  var supportRri: Bool {
    get {return _supportRri ?? false}
    set {_supportRri = newValue}
  }
  /// Returns true if `supportRri` has been explicitly set.
  var hasSupportRri: Bool {return self._supportRri != nil}
  /// Clears the value of `supportRri`. Subsequent reads from it will return its default value.
  mutating func clearSupportRri() {self._supportRri = nil}

  var supportMedic: Bool {
    get {return _supportMedic ?? false}
    set {_supportMedic = newValue}
  }
  /// Returns true if `supportMedic` has been explicitly set.
  var hasSupportMedic: Bool {return self._supportMedic != nil}
  /// Clears the value of `supportMedic`. Subsequent reads from it will return its default value.
  mutating func clearSupportMedic() {self._supportMedic = nil}

  var supportSpo2: Bool {
    get {return _supportSpo2 ?? false}
    set {_supportSpo2 = newValue}
  }
  /// Returns true if `supportSpo2` has been explicitly set.
  var hasSupportSpo2: Bool {return self._supportSpo2 != nil}
  /// Clears the value of `supportSpo2`. Subsequent reads from it will return its default value.
  mutating func clearSupportSpo2() {self._supportSpo2 = nil}

  var supportSwim: Bool {
    get {return _supportSwim ?? false}
    set {_supportSwim = newValue}
  }
  /// Returns true if `supportSwim` has been explicitly set.
  var hasSupportSwim: Bool {return self._supportSwim != nil}
  /// Clears the value of `supportSwim`. Subsequent reads from it will return its default value.
  mutating func clearSupportSwim() {self._supportSwim = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _supportHealth: Bool? = nil
  fileprivate var _supportGnss: Bool? = nil
  fileprivate var _supportEcg: Bool? = nil
  fileprivate var _supportPpg: Bool? = nil
  fileprivate var _supportRri: Bool? = nil
  fileprivate var _supportMedic: Bool? = nil
  fileprivate var _supportSpo2: Bool? = nil
  fileprivate var _supportSwim: Bool? = nil
}

struct DataInfoResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rtDataInfo: RtDataInfo {
    get {return _rtDataInfo ?? RtDataInfo()}
    set {_rtDataInfo = newValue}
  }
  /// Returns true if `rtDataInfo` has been explicitly set.
  var hasRtDataInfo: Bool {return self._rtDataInfo != nil}
  /// Clears the value of `rtDataInfo`. Subsequent reads from it will return its default value.
  mutating func clearRtDataInfo() {self._rtDataInfo = nil}

  var hisDataInfo: HisDataInfo {
    get {return _hisDataInfo ?? HisDataInfo()}
    set {_hisDataInfo = newValue}
  }
  /// Returns true if `hisDataInfo` has been explicitly set.
  var hasHisDataInfo: Bool {return self._hisDataInfo != nil}
  /// Clears the value of `hisDataInfo`. Subsequent reads from it will return its default value.
  mutating func clearHisDataInfo() {self._hisDataInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rtDataInfo: RtDataInfo? = nil
  fileprivate var _hisDataInfo: HisDataInfo? = nil
}

struct DataInfoRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var reserved: UInt32 {
    get {return _reserved ?? 0}
    set {_reserved = newValue}
  }
  /// Returns true if `reserved` has been explicitly set.
  var hasReserved: Bool {return self._reserved != nil}
  /// Clears the value of `reserved`. Subsequent reads from it will return its default value.
  mutating func clearReserved() {self._reserved = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _reserved: UInt32? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension RtDataInfo: @unchecked Sendable {}
extension HisDataInfo: @unchecked Sendable {}
extension DataInfoResponse: @unchecked Sendable {}
extension DataInfoRequest: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension RtDataInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "RtDataInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "support_time"),
    2: .standard(proto: "support_battery"),
    3: .standard(proto: "support_health"),
  ]

  public var isInitialized: Bool {
    if self._supportTime == nil {return false}
    if self._supportBattery == nil {return false}
    if self._supportHealth == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._supportTime) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._supportBattery) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._supportHealth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._supportTime {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._supportBattery {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._supportHealth {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RtDataInfo, rhs: RtDataInfo) -> Bool {
    if lhs._supportTime != rhs._supportTime {return false}
    if lhs._supportBattery != rhs._supportBattery {return false}
    if lhs._supportHealth != rhs._supportHealth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisDataInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisDataInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "support_health"),
    2: .standard(proto: "support_gnss"),
    3: .standard(proto: "support_ecg"),
    4: .standard(proto: "support_ppg"),
    5: .standard(proto: "support_rri"),
    6: .standard(proto: "support_medic"),
    7: .standard(proto: "support_spo2"),
    8: .standard(proto: "support_swim"),
  ]

  public var isInitialized: Bool {
    if self._supportHealth == nil {return false}
    if self._supportGnss == nil {return false}
    if self._supportEcg == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._supportHealth) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._supportGnss) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._supportEcg) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._supportPpg) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._supportRri) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._supportMedic) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._supportSpo2) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._supportSwim) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._supportHealth {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._supportGnss {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._supportEcg {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._supportPpg {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._supportRri {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._supportMedic {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._supportSpo2 {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._supportSwim {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisDataInfo, rhs: HisDataInfo) -> Bool {
    if lhs._supportHealth != rhs._supportHealth {return false}
    if lhs._supportGnss != rhs._supportGnss {return false}
    if lhs._supportEcg != rhs._supportEcg {return false}
    if lhs._supportPpg != rhs._supportPpg {return false}
    if lhs._supportRri != rhs._supportRri {return false}
    if lhs._supportMedic != rhs._supportMedic {return false}
    if lhs._supportSpo2 != rhs._supportSpo2 {return false}
    if lhs._supportSwim != rhs._supportSwim {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DataInfoResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rt_data_info"),
    2: .standard(proto: "his_data_info"),
  ]

  public var isInitialized: Bool {
    if let v = self._rtDataInfo, !v.isInitialized {return false}
    if let v = self._hisDataInfo, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rtDataInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._hisDataInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rtDataInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._hisDataInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DataInfoResponse, rhs: DataInfoResponse) -> Bool {
    if lhs._rtDataInfo != rhs._rtDataInfo {return false}
    if lhs._hisDataInfo != rhs._hisDataInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension DataInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DataInfoRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reserved"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._reserved) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._reserved {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DataInfoRequest, rhs: DataInfoRequest) -> Bool {
    if lhs._reserved != rhs._reserved {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
