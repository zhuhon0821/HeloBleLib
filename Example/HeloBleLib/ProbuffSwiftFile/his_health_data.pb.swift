// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: his_health_data.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum HisMdtState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case prepare // = 0
  case ongoing // = 1
  case relax // = 2

  init() {
    self = .prepare
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .prepare
    case 1: self = .ongoing
    case 2: self = .relax
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .prepare: return 0
    case .ongoing: return 1
    case .relax: return 2
    }
  }

}

#if swift(>=4.2)

extension HisMdtState: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum TPAMeasureType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case null // = 0
  case auto // = 1
  case armpit // = 2

  init() {
    self = .null
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .null
    case 1: self = .auto
    case 2: self = .armpit
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .null: return 0
    case .auto: return 1
    case .armpit: return 2
    }
  }

}

#if swift(>=4.2)

extension TPAMeasureType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct HisHealthPedo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: UInt32 {
    get {return _type ?? 0}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var state: UInt32 {
    get {return _state ?? 0}
    set {_state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  var hasState: Bool {return self._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  mutating func clearState() {self._state = nil}

  var calorie: UInt32 {
    get {return _calorie ?? 0}
    set {_calorie = newValue}
  }
  /// Returns true if `calorie` has been explicitly set.
  var hasCalorie: Bool {return self._calorie != nil}
  /// Clears the value of `calorie`. Subsequent reads from it will return its default value.
  mutating func clearCalorie() {self._calorie = nil}

  var step: UInt32 {
    get {return _step ?? 0}
    set {_step = newValue}
  }
  /// Returns true if `step` has been explicitly set.
  var hasStep: Bool {return self._step != nil}
  /// Clears the value of `step`. Subsequent reads from it will return its default value.
  mutating func clearStep() {self._step = nil}

  var distance: UInt32 {
    get {return _distance ?? 0}
    set {_distance = newValue}
  }
  /// Returns true if `distance` has been explicitly set.
  var hasDistance: Bool {return self._distance != nil}
  /// Clears the value of `distance`. Subsequent reads from it will return its default value.
  mutating func clearDistance() {self._distance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: UInt32? = nil
  fileprivate var _state: UInt32? = nil
  fileprivate var _calorie: UInt32? = nil
  fileprivate var _step: UInt32? = nil
  fileprivate var _distance: UInt32? = nil
}

struct HisHealthHr {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var minBpm: UInt32 {
    get {return _minBpm ?? 0}
    set {_minBpm = newValue}
  }
  /// Returns true if `minBpm` has been explicitly set.
  var hasMinBpm: Bool {return self._minBpm != nil}
  /// Clears the value of `minBpm`. Subsequent reads from it will return its default value.
  mutating func clearMinBpm() {self._minBpm = nil}

  var maxBpm: UInt32 {
    get {return _maxBpm ?? 0}
    set {_maxBpm = newValue}
  }
  /// Returns true if `maxBpm` has been explicitly set.
  var hasMaxBpm: Bool {return self._maxBpm != nil}
  /// Clears the value of `maxBpm`. Subsequent reads from it will return its default value.
  mutating func clearMaxBpm() {self._maxBpm = nil}

  var avgBpm: UInt32 {
    get {return _avgBpm ?? 0}
    set {_avgBpm = newValue}
  }
  /// Returns true if `avgBpm` has been explicitly set.
  var hasAvgBpm: Bool {return self._avgBpm != nil}
  /// Clears the value of `avgBpm`. Subsequent reads from it will return its default value.
  mutating func clearAvgBpm() {self._avgBpm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _minBpm: UInt32? = nil
  fileprivate var _maxBpm: UInt32? = nil
  fileprivate var _avgBpm: UInt32? = nil
}

struct HisHealthOutAct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var outAct: UInt32 {
    get {return _outAct ?? 0}
    set {_outAct = newValue}
  }
  /// Returns true if `outAct` has been explicitly set.
  var hasOutAct: Bool {return self._outAct != nil}
  /// Clears the value of `outAct`. Subsequent reads from it will return its default value.
  mutating func clearOutAct() {self._outAct = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _outAct: UInt32? = nil
}

struct HisHealthHrv {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sdnn: Float {
    get {return _sdnn ?? 0}
    set {_sdnn = newValue}
  }
  /// Returns true if `sdnn` has been explicitly set.
  var hasSdnn: Bool {return self._sdnn != nil}
  /// Clears the value of `sdnn`. Subsequent reads from it will return its default value.
  mutating func clearSdnn() {self._sdnn = nil}

  var rmssd: Float {
    get {return _rmssd ?? 0}
    set {_rmssd = newValue}
  }
  /// Returns true if `rmssd` has been explicitly set.
  var hasRmssd: Bool {return self._rmssd != nil}
  /// Clears the value of `rmssd`. Subsequent reads from it will return its default value.
  mutating func clearRmssd() {self._rmssd = nil}

  var pnn50: Float {
    get {return _pnn50 ?? 0}
    set {_pnn50 = newValue}
  }
  /// Returns true if `pnn50` has been explicitly set.
  var hasPnn50: Bool {return self._pnn50 != nil}
  /// Clears the value of `pnn50`. Subsequent reads from it will return its default value.
  mutating func clearPnn50() {self._pnn50 = nil}

  var mean: Float {
    get {return _mean ?? 0}
    set {_mean = newValue}
  }
  /// Returns true if `mean` has been explicitly set.
  var hasMean: Bool {return self._mean != nil}
  /// Clears the value of `mean`. Subsequent reads from it will return its default value.
  mutating func clearMean() {self._mean = nil}

  var fatigue: Float {
    get {return _fatigue ?? 0}
    set {_fatigue = newValue}
  }
  /// Returns true if `fatigue` has been explicitly set.
  var hasFatigue: Bool {return self._fatigue != nil}
  /// Clears the value of `fatigue`. Subsequent reads from it will return its default value.
  mutating func clearFatigue() {self._fatigue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sdnn: Float? = nil
  fileprivate var _rmssd: Float? = nil
  fileprivate var _pnn50: Float? = nil
  fileprivate var _mean: Float? = nil
  fileprivate var _fatigue: Float? = nil
}

struct HisHealthMdt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sdnn: Float {
    get {return _sdnn ?? 0}
    set {_sdnn = newValue}
  }
  /// Returns true if `sdnn` has been explicitly set.
  var hasSdnn: Bool {return self._sdnn != nil}
  /// Clears the value of `sdnn`. Subsequent reads from it will return its default value.
  mutating func clearSdnn() {self._sdnn = nil}

  var rmssd: Float {
    get {return _rmssd ?? 0}
    set {_rmssd = newValue}
  }
  /// Returns true if `rmssd` has been explicitly set.
  var hasRmssd: Bool {return self._rmssd != nil}
  /// Clears the value of `rmssd`. Subsequent reads from it will return its default value.
  mutating func clearRmssd() {self._rmssd = nil}

  var pnn50: Float {
    get {return _pnn50 ?? 0}
    set {_pnn50 = newValue}
  }
  /// Returns true if `pnn50` has been explicitly set.
  var hasPnn50: Bool {return self._pnn50 != nil}
  /// Clears the value of `pnn50`. Subsequent reads from it will return its default value.
  mutating func clearPnn50() {self._pnn50 = nil}

  var mean: Float {
    get {return _mean ?? 0}
    set {_mean = newValue}
  }
  /// Returns true if `mean` has been explicitly set.
  var hasMean: Bool {return self._mean != nil}
  /// Clears the value of `mean`. Subsequent reads from it will return its default value.
  mutating func clearMean() {self._mean = nil}

  var status: HisMdtState {
    get {return _status ?? .prepare}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var result: Float {
    get {return _result ?? 0}
    set {_result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return self._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {self._result = nil}

  var relax: Float {
    get {return _relax ?? 0}
    set {_relax = newValue}
  }
  /// Returns true if `relax` has been explicitly set.
  var hasRelax: Bool {return self._relax != nil}
  /// Clears the value of `relax`. Subsequent reads from it will return its default value.
  mutating func clearRelax() {self._relax = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sdnn: Float? = nil
  fileprivate var _rmssd: Float? = nil
  fileprivate var _pnn50: Float? = nil
  fileprivate var _mean: Float? = nil
  fileprivate var _status: HisMdtState? = nil
  fileprivate var _result: Float? = nil
  fileprivate var _relax: Float? = nil
}

struct HisHealthBp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sbp: UInt32 {
    get {return _sbp ?? 0}
    set {_sbp = newValue}
  }
  /// Returns true if `sbp` has been explicitly set.
  var hasSbp: Bool {return self._sbp != nil}
  /// Clears the value of `sbp`. Subsequent reads from it will return its default value.
  mutating func clearSbp() {self._sbp = nil}

  var dbp: UInt32 {
    get {return _dbp ?? 0}
    set {_dbp = newValue}
  }
  /// Returns true if `dbp` has been explicitly set.
  var hasDbp: Bool {return self._dbp != nil}
  /// Clears the value of `dbp`. Subsequent reads from it will return its default value.
  mutating func clearDbp() {self._dbp = nil}

  var time: UInt32 {
    get {return _time ?? 0}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sbp: UInt32? = nil
  fileprivate var _dbp: UInt32? = nil
  fileprivate var _time: UInt32? = nil
}

struct HisHealthAf {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var af: Int32 {
    get {return _af ?? 0}
    set {_af = newValue}
  }
  /// Returns true if `af` has been explicitly set.
  var hasAf: Bool {return self._af != nil}
  /// Clears the value of `af`. Subsequent reads from it will return its default value.
  mutating func clearAf() {self._af = nil}

  /// true for manual measurement
  var manual: Bool {
    get {return _manual ?? false}
    set {_manual = newValue}
  }
  /// Returns true if `manual` has been explicitly set.
  var hasManual: Bool {return self._manual != nil}
  /// Clears the value of `manual`. Subsequent reads from it will return its default value.
  mutating func clearManual() {self._manual = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _af: Int32? = nil
  fileprivate var _manual: Bool? = nil
}

struct HisHealthSleep {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sleepData: [UInt32] = []

  var shutDown: Bool {
    get {return _shutDown ?? false}
    set {_shutDown = newValue}
  }
  /// Returns true if `shutDown` has been explicitly set.
  var hasShutDown: Bool {return self._shutDown != nil}
  /// Clears the value of `shutDown`. Subsequent reads from it will return its default value.
  mutating func clearShutDown() {self._shutDown = nil}

  var charge: Bool {
    get {return _charge ?? false}
    set {_charge = newValue}
  }
  /// Returns true if `charge` has been explicitly set.
  var hasCharge: Bool {return self._charge != nil}
  /// Clears the value of `charge`. Subsequent reads from it will return its default value.
  mutating func clearCharge() {self._charge = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _shutDown: Bool? = nil
  fileprivate var _charge: Bool? = nil
}

struct HisHealthMood {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var moodLevel: UInt32 {
    get {return _moodLevel ?? 0}
    set {_moodLevel = newValue}
  }
  /// Returns true if `moodLevel` has been explicitly set.
  var hasMoodLevel: Bool {return self._moodLevel != nil}
  /// Clears the value of `moodLevel`. Subsequent reads from it will return its default value.
  mutating func clearMoodLevel() {self._moodLevel = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _moodLevel: UInt32? = nil
}

struct HisHealthBreath {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var breathrate: UInt32 {
    get {return _breathrate ?? 0}
    set {_breathrate = newValue}
  }
  /// Returns true if `breathrate` has been explicitly set.
  var hasBreathrate: Bool {return self._breathrate != nil}
  /// Clears the value of `breathrate`. Subsequent reads from it will return its default value.
  mutating func clearBreathrate() {self._breathrate = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _breathrate: UInt32? = nil
}

struct HisHealthBioz {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var r: UInt32 {
    get {return _r ?? 0}
    set {_r = newValue}
  }
  /// Returns true if `r` has been explicitly set.
  var hasR: Bool {return self._r != nil}
  /// Clears the value of `r`. Subsequent reads from it will return its default value.
  mutating func clearR() {self._r = nil}

  var x: UInt32 {
    get {return _x ?? 0}
    set {_x = newValue}
  }
  /// Returns true if `x` has been explicitly set.
  var hasX: Bool {return self._x != nil}
  /// Clears the value of `x`. Subsequent reads from it will return its default value.
  mutating func clearX() {self._x = nil}

  var fat: UInt32 {
    get {return _fat ?? 0}
    set {_fat = newValue}
  }
  /// Returns true if `fat` has been explicitly set.
  var hasFat: Bool {return self._fat != nil}
  /// Clears the value of `fat`. Subsequent reads from it will return its default value.
  mutating func clearFat() {self._fat = nil}

  var bmi: UInt32 {
    get {return _bmi ?? 0}
    set {_bmi = newValue}
  }
  /// Returns true if `bmi` has been explicitly set.
  var hasBmi: Bool {return self._bmi != nil}
  /// Clears the value of `bmi`. Subsequent reads from it will return its default value.
  mutating func clearBmi() {self._bmi = nil}

  var type: UInt32 {
    get {return _type ?? 0}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _r: UInt32? = nil
  fileprivate var _x: UInt32? = nil
  fileprivate var _fat: UInt32? = nil
  fileprivate var _bmi: UInt32? = nil
  fileprivate var _type: UInt32? = nil
}

struct HisHealthBOxy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var minOxy: UInt32 {
    get {return _minOxy ?? 0}
    set {_minOxy = newValue}
  }
  /// Returns true if `minOxy` has been explicitly set.
  var hasMinOxy: Bool {return self._minOxy != nil}
  /// Clears the value of `minOxy`. Subsequent reads from it will return its default value.
  mutating func clearMinOxy() {self._minOxy = nil}

  var maxOxy: UInt32 {
    get {return _maxOxy ?? 0}
    set {_maxOxy = newValue}
  }
  /// Returns true if `maxOxy` has been explicitly set.
  var hasMaxOxy: Bool {return self._maxOxy != nil}
  /// Clears the value of `maxOxy`. Subsequent reads from it will return its default value.
  mutating func clearMaxOxy() {self._maxOxy = nil}

  var agvOxy: UInt32 {
    get {return _agvOxy ?? 0}
    set {_agvOxy = newValue}
  }
  /// Returns true if `agvOxy` has been explicitly set.
  var hasAgvOxy: Bool {return self._agvOxy != nil}
  /// Clears the value of `agvOxy`. Subsequent reads from it will return its default value.
  mutating func clearAgvOxy() {self._agvOxy = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _minOxy: UInt32? = nil
  fileprivate var _maxOxy: UInt32? = nil
  fileprivate var _agvOxy: UInt32? = nil
}

struct HisHealthTemp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: TPAMeasureType {
    get {return _type ?? .null}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var eviBody: UInt32 {
    get {return _eviBody ?? 0}
    set {_eviBody = newValue}
  }
  /// Returns true if `eviBody` has been explicitly set.
  var hasEviBody: Bool {return self._eviBody != nil}
  /// Clears the value of `eviBody`. Subsequent reads from it will return its default value.
  mutating func clearEviBody() {self._eviBody = nil}

  var estiArm: UInt32 {
    get {return _estiArm ?? 0}
    set {_estiArm = newValue}
  }
  /// Returns true if `estiArm` has been explicitly set.
  var hasEstiArm: Bool {return self._estiArm != nil}
  /// Clears the value of `estiArm`. Subsequent reads from it will return its default value.
  mutating func clearEstiArm() {self._estiArm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: TPAMeasureType? = nil
  fileprivate var _eviBody: UInt32? = nil
  fileprivate var _estiArm: UInt32? = nil
}

struct HisHealthOAQ {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var o3ConcPpb: Float {
    get {return _o3ConcPpb ?? 0}
    set {_o3ConcPpb = newValue}
  }
  /// Returns true if `o3ConcPpb` has been explicitly set.
  var hasO3ConcPpb: Bool {return self._o3ConcPpb != nil}
  /// Clears the value of `o3ConcPpb`. Subsequent reads from it will return its default value.
  mutating func clearO3ConcPpb() {self._o3ConcPpb = nil}

  var fastAqi: UInt32 {
    get {return _fastAqi ?? 0}
    set {_fastAqi = newValue}
  }
  /// Returns true if `fastAqi` has been explicitly set.
  var hasFastAqi: Bool {return self._fastAqi != nil}
  /// Clears the value of `fastAqi`. Subsequent reads from it will return its default value.
  mutating func clearFastAqi() {self._fastAqi = nil}

  var epaAqi: UInt32 {
    get {return _epaAqi ?? 0}
    set {_epaAqi = newValue}
  }
  /// Returns true if `epaAqi` has been explicitly set.
  var hasEpaAqi: Bool {return self._epaAqi != nil}
  /// Clears the value of `epaAqi`. Subsequent reads from it will return its default value.
  mutating func clearEpaAqi() {self._epaAqi = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _o3ConcPpb: Float? = nil
  fileprivate var _fastAqi: UInt32? = nil
  fileprivate var _epaAqi: UInt32? = nil
}

struct HisHealthIAQ {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var iaq: Float {
    get {return _iaq ?? 0}
    set {_iaq = newValue}
  }
  /// Returns true if `iaq` has been explicitly set.
  var hasIaq: Bool {return self._iaq != nil}
  /// Clears the value of `iaq`. Subsequent reads from it will return its default value.
  mutating func clearIaq() {self._iaq = nil}

  var tvoc: Float {
    get {return _tvoc ?? 0}
    set {_tvoc = newValue}
  }
  /// Returns true if `tvoc` has been explicitly set.
  var hasTvoc: Bool {return self._tvoc != nil}
  /// Clears the value of `tvoc`. Subsequent reads from it will return its default value.
  mutating func clearTvoc() {self._tvoc = nil}

  var etoh: Float {
    get {return _etoh ?? 0}
    set {_etoh = newValue}
  }
  /// Returns true if `etoh` has been explicitly set.
  var hasEtoh: Bool {return self._etoh != nil}
  /// Clears the value of `etoh`. Subsequent reads from it will return its default value.
  mutating func clearEtoh() {self._etoh = nil}

  var eco2: Float {
    get {return _eco2 ?? 0}
    set {_eco2 = newValue}
  }
  /// Returns true if `eco2` has been explicitly set.
  var hasEco2: Bool {return self._eco2 != nil}
  /// Clears the value of `eco2`. Subsequent reads from it will return its default value.
  mutating func clearEco2() {self._eco2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _iaq: Float? = nil
  fileprivate var _tvoc: Float? = nil
  fileprivate var _etoh: Float? = nil
  fileprivate var _eco2: Float? = nil
}

struct HisHealthHuMiTure {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var humidity: Float {
    get {return _humidity ?? 0}
    set {_humidity = newValue}
  }
  /// Returns true if `humidity` has been explicitly set.
  var hasHumidity: Bool {return self._humidity != nil}
  /// Clears the value of `humidity`. Subsequent reads from it will return its default value.
  mutating func clearHumidity() {self._humidity = nil}

  var temperature: Float {
    get {return _temperature ?? 0}
    set {_temperature = newValue}
  }
  /// Returns true if `temperature` has been explicitly set.
  var hasTemperature: Bool {return self._temperature != nil}
  /// Clears the value of `temperature`. Subsequent reads from it will return its default value.
  mutating func clearTemperature() {self._temperature = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _humidity: Float? = nil
  fileprivate var _temperature: Float? = nil
}

struct HisDataHealth {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _storage._timeStamp ?? DateTime()}
    set {_uniqueStorage()._timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return _storage._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {_uniqueStorage()._timeStamp = nil}

  var sleepData: HisHealthSleep {
    get {return _storage._sleepData ?? HisHealthSleep()}
    set {_uniqueStorage()._sleepData = newValue}
  }
  /// Returns true if `sleepData` has been explicitly set.
  var hasSleepData: Bool {return _storage._sleepData != nil}
  /// Clears the value of `sleepData`. Subsequent reads from it will return its default value.
  mutating func clearSleepData() {_uniqueStorage()._sleepData = nil}

  var pedoData: HisHealthPedo {
    get {return _storage._pedoData ?? HisHealthPedo()}
    set {_uniqueStorage()._pedoData = newValue}
  }
  /// Returns true if `pedoData` has been explicitly set.
  var hasPedoData: Bool {return _storage._pedoData != nil}
  /// Clears the value of `pedoData`. Subsequent reads from it will return its default value.
  mutating func clearPedoData() {_uniqueStorage()._pedoData = nil}

  var hrData: HisHealthHr {
    get {return _storage._hrData ?? HisHealthHr()}
    set {_uniqueStorage()._hrData = newValue}
  }
  /// Returns true if `hrData` has been explicitly set.
  var hasHrData: Bool {return _storage._hrData != nil}
  /// Clears the value of `hrData`. Subsequent reads from it will return its default value.
  mutating func clearHrData() {_uniqueStorage()._hrData = nil}

  var hrvData: HisHealthHrv {
    get {return _storage._hrvData ?? HisHealthHrv()}
    set {_uniqueStorage()._hrvData = newValue}
  }
  /// Returns true if `hrvData` has been explicitly set.
  var hasHrvData: Bool {return _storage._hrvData != nil}
  /// Clears the value of `hrvData`. Subsequent reads from it will return its default value.
  mutating func clearHrvData() {_uniqueStorage()._hrvData = nil}

  var bpData: HisHealthBp {
    get {return _storage._bpData ?? HisHealthBp()}
    set {_uniqueStorage()._bpData = newValue}
  }
  /// Returns true if `bpData` has been explicitly set.
  var hasBpData: Bool {return _storage._bpData != nil}
  /// Clears the value of `bpData`. Subsequent reads from it will return its default value.
  mutating func clearBpData() {_uniqueStorage()._bpData = nil}

  var afData: HisHealthAf {
    get {return _storage._afData ?? HisHealthAf()}
    set {_uniqueStorage()._afData = newValue}
  }
  /// Returns true if `afData` has been explicitly set.
  var hasAfData: Bool {return _storage._afData != nil}
  /// Clears the value of `afData`. Subsequent reads from it will return its default value.
  mutating func clearAfData() {_uniqueStorage()._afData = nil}

  var mdtData: HisHealthMdt {
    get {return _storage._mdtData ?? HisHealthMdt()}
    set {_uniqueStorage()._mdtData = newValue}
  }
  /// Returns true if `mdtData` has been explicitly set.
  var hasMdtData: Bool {return _storage._mdtData != nil}
  /// Clears the value of `mdtData`. Subsequent reads from it will return its default value.
  mutating func clearMdtData() {_uniqueStorage()._mdtData = nil}

  var moodData: HisHealthMood {
    get {return _storage._moodData ?? HisHealthMood()}
    set {_uniqueStorage()._moodData = newValue}
  }
  /// Returns true if `moodData` has been explicitly set.
  var hasMoodData: Bool {return _storage._moodData != nil}
  /// Clears the value of `moodData`. Subsequent reads from it will return its default value.
  mutating func clearMoodData() {_uniqueStorage()._moodData = nil}

  var breathData: HisHealthBreath {
    get {return _storage._breathData ?? HisHealthBreath()}
    set {_uniqueStorage()._breathData = newValue}
  }
  /// Returns true if `breathData` has been explicitly set.
  var hasBreathData: Bool {return _storage._breathData != nil}
  /// Clears the value of `breathData`. Subsequent reads from it will return its default value.
  mutating func clearBreathData() {_uniqueStorage()._breathData = nil}

  var biozData: HisHealthBioz {
    get {return _storage._biozData ?? HisHealthBioz()}
    set {_uniqueStorage()._biozData = newValue}
  }
  /// Returns true if `biozData` has been explicitly set.
  var hasBiozData: Bool {return _storage._biozData != nil}
  /// Clears the value of `biozData`. Subsequent reads from it will return its default value.
  mutating func clearBiozData() {_uniqueStorage()._biozData = nil}

  var bxoyData: HisHealthBOxy {
    get {return _storage._bxoyData ?? HisHealthBOxy()}
    set {_uniqueStorage()._bxoyData = newValue}
  }
  /// Returns true if `bxoyData` has been explicitly set.
  var hasBxoyData: Bool {return _storage._bxoyData != nil}
  /// Clears the value of `bxoyData`. Subsequent reads from it will return its default value.
  mutating func clearBxoyData() {_uniqueStorage()._bxoyData = nil}

  var temperatureData: HisHealthTemp {
    get {return _storage._temperatureData ?? HisHealthTemp()}
    set {_uniqueStorage()._temperatureData = newValue}
  }
  /// Returns true if `temperatureData` has been explicitly set.
  var hasTemperatureData: Bool {return _storage._temperatureData != nil}
  /// Clears the value of `temperatureData`. Subsequent reads from it will return its default value.
  mutating func clearTemperatureData() {_uniqueStorage()._temperatureData = nil}

  var outActData: HisHealthOutAct {
    get {return _storage._outActData ?? HisHealthOutAct()}
    set {_uniqueStorage()._outActData = newValue}
  }
  /// Returns true if `outActData` has been explicitly set.
  var hasOutActData: Bool {return _storage._outActData != nil}
  /// Clears the value of `outActData`. Subsequent reads from it will return its default value.
  mutating func clearOutActData() {_uniqueStorage()._outActData = nil}

  var oaqData: HisHealthOAQ {
    get {return _storage._oaqData ?? HisHealthOAQ()}
    set {_uniqueStorage()._oaqData = newValue}
  }
  /// Returns true if `oaqData` has been explicitly set.
  var hasOaqData: Bool {return _storage._oaqData != nil}
  /// Clears the value of `oaqData`. Subsequent reads from it will return its default value.
  mutating func clearOaqData() {_uniqueStorage()._oaqData = nil}

  var iaqData: HisHealthIAQ {
    get {return _storage._iaqData ?? HisHealthIAQ()}
    set {_uniqueStorage()._iaqData = newValue}
  }
  /// Returns true if `iaqData` has been explicitly set.
  var hasIaqData: Bool {return _storage._iaqData != nil}
  /// Clears the value of `iaqData`. Subsequent reads from it will return its default value.
  mutating func clearIaqData() {_uniqueStorage()._iaqData = nil}

  var humitureData: HisHealthHuMiTure {
    get {return _storage._humitureData ?? HisHealthHuMiTure()}
    set {_uniqueStorage()._humitureData = newValue}
  }
  /// Returns true if `humitureData` has been explicitly set.
  var hasHumitureData: Bool {return _storage._humitureData != nil}
  /// Clears the value of `humitureData`. Subsequent reads from it will return its default value.
  mutating func clearHumitureData() {_uniqueStorage()._humitureData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension HisMdtState: @unchecked Sendable {}
extension TPAMeasureType: @unchecked Sendable {}
extension HisHealthPedo: @unchecked Sendable {}
extension HisHealthHr: @unchecked Sendable {}
extension HisHealthOutAct: @unchecked Sendable {}
extension HisHealthHrv: @unchecked Sendable {}
extension HisHealthMdt: @unchecked Sendable {}
extension HisHealthBp: @unchecked Sendable {}
extension HisHealthAf: @unchecked Sendable {}
extension HisHealthSleep: @unchecked Sendable {}
extension HisHealthMood: @unchecked Sendable {}
extension HisHealthBreath: @unchecked Sendable {}
extension HisHealthBioz: @unchecked Sendable {}
extension HisHealthBOxy: @unchecked Sendable {}
extension HisHealthTemp: @unchecked Sendable {}
extension HisHealthOAQ: @unchecked Sendable {}
extension HisHealthIAQ: @unchecked Sendable {}
extension HisHealthHuMiTure: @unchecked Sendable {}
extension HisDataHealth: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension HisMdtState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PREPARE"),
    1: .same(proto: "ONGOING"),
    2: .same(proto: "RELAX"),
  ]
}

extension TPAMeasureType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TPA_MEASURE_TYPE_NULL"),
    1: .same(proto: "TPA_MEASURE_TYPE_AUTO"),
    2: .same(proto: "TPA_MEASURE_TYPE_ARMPIT"),
  ]
}

extension HisHealthPedo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthPedo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "state"),
    3: .same(proto: "calorie"),
    4: .same(proto: "step"),
    5: .same(proto: "distance"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._state == nil {return false}
    if self._calorie == nil {return false}
    if self._step == nil {return false}
    if self._distance == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._type) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._state) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._calorie) }()
      case 4: try { try decoder.decodeSingularFixed32Field(value: &self._step) }()
      case 5: try { try decoder.decodeSingularFixed32Field(value: &self._distance) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._state {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._calorie {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._step {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._distance {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthPedo, rhs: HisHealthPedo) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._state != rhs._state {return false}
    if lhs._calorie != rhs._calorie {return false}
    if lhs._step != rhs._step {return false}
    if lhs._distance != rhs._distance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthHr: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthHr"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_bpm"),
    2: .standard(proto: "max_bpm"),
    3: .standard(proto: "avg_bpm"),
  ]

  public var isInitialized: Bool {
    if self._minBpm == nil {return false}
    if self._maxBpm == nil {return false}
    if self._avgBpm == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._minBpm) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._maxBpm) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._avgBpm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._minBpm {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._maxBpm {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._avgBpm {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthHr, rhs: HisHealthHr) -> Bool {
    if lhs._minBpm != rhs._minBpm {return false}
    if lhs._maxBpm != rhs._maxBpm {return false}
    if lhs._avgBpm != rhs._avgBpm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthOutAct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthOutAct"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "out_act"),
  ]

  public var isInitialized: Bool {
    if self._outAct == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._outAct) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._outAct {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthOutAct, rhs: HisHealthOutAct) -> Bool {
    if lhs._outAct != rhs._outAct {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthHrv: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthHrv"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SDNN"),
    2: .same(proto: "RMSSD"),
    3: .same(proto: "PNN50"),
    4: .same(proto: "MEAN"),
    5: .same(proto: "fatigue"),
  ]

  public var isInitialized: Bool {
    if self._sdnn == nil {return false}
    if self._rmssd == nil {return false}
    if self._pnn50 == nil {return false}
    if self._mean == nil {return false}
    if self._fatigue == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._sdnn) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._rmssd) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._pnn50) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self._mean) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self._fatigue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sdnn {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rmssd {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._pnn50 {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._mean {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._fatigue {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthHrv, rhs: HisHealthHrv) -> Bool {
    if lhs._sdnn != rhs._sdnn {return false}
    if lhs._rmssd != rhs._rmssd {return false}
    if lhs._pnn50 != rhs._pnn50 {return false}
    if lhs._mean != rhs._mean {return false}
    if lhs._fatigue != rhs._fatigue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthMdt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthMdt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SDNN"),
    2: .same(proto: "RMSSD"),
    3: .same(proto: "PNN50"),
    4: .same(proto: "MEAN"),
    5: .same(proto: "status"),
    6: .same(proto: "RESULT"),
    7: .same(proto: "RELAX"),
  ]

  public var isInitialized: Bool {
    if self._sdnn == nil {return false}
    if self._rmssd == nil {return false}
    if self._pnn50 == nil {return false}
    if self._mean == nil {return false}
    if self._status == nil {return false}
    if self._result == nil {return false}
    if self._relax == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._sdnn) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._rmssd) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._pnn50) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self._mean) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self._result) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self._relax) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sdnn {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rmssd {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._pnn50 {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._mean {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._result {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._relax {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthMdt, rhs: HisHealthMdt) -> Bool {
    if lhs._sdnn != rhs._sdnn {return false}
    if lhs._rmssd != rhs._rmssd {return false}
    if lhs._pnn50 != rhs._pnn50 {return false}
    if lhs._mean != rhs._mean {return false}
    if lhs._status != rhs._status {return false}
    if lhs._result != rhs._result {return false}
    if lhs._relax != rhs._relax {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthBp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthBp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sbp"),
    2: .same(proto: "dbp"),
    3: .same(proto: "time"),
  ]

  public var isInitialized: Bool {
    if self._sbp == nil {return false}
    if self._dbp == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._sbp) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._dbp) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sbp {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._dbp {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._time {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthBp, rhs: HisHealthBp) -> Bool {
    if lhs._sbp != rhs._sbp {return false}
    if lhs._dbp != rhs._dbp {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthAf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthAf"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "af"),
    2: .same(proto: "manual"),
  ]

  public var isInitialized: Bool {
    if self._af == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularSFixed32Field(value: &self._af) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._manual) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._af {
      try visitor.visitSingularSFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._manual {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthAf, rhs: HisHealthAf) -> Bool {
    if lhs._af != rhs._af {return false}
    if lhs._manual != rhs._manual {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthSleep: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthSleep"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sleep_data"),
    2: .standard(proto: "shut_down"),
    3: .same(proto: "charge"),
  ]

  public var isInitialized: Bool {
    if self._shutDown == nil {return false}
    if self._charge == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedFixed32Field(value: &self.sleepData) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._shutDown) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._charge) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.sleepData.isEmpty {
      try visitor.visitPackedFixed32Field(value: self.sleepData, fieldNumber: 1)
    }
    try { if let v = self._shutDown {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._charge {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthSleep, rhs: HisHealthSleep) -> Bool {
    if lhs.sleepData != rhs.sleepData {return false}
    if lhs._shutDown != rhs._shutDown {return false}
    if lhs._charge != rhs._charge {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthMood: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthMood"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mood_level"),
  ]

  public var isInitialized: Bool {
    if self._moodLevel == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._moodLevel) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._moodLevel {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthMood, rhs: HisHealthMood) -> Bool {
    if lhs._moodLevel != rhs._moodLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthBreath: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthBreath"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "breathrate"),
  ]

  public var isInitialized: Bool {
    if self._breathrate == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._breathrate) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._breathrate {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthBreath, rhs: HisHealthBreath) -> Bool {
    if lhs._breathrate != rhs._breathrate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthBioz: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthBioz"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "R"),
    2: .same(proto: "X"),
    3: .same(proto: "fat"),
    4: .same(proto: "bmi"),
    5: .same(proto: "type"),
  ]

  public var isInitialized: Bool {
    if self._r == nil {return false}
    if self._x == nil {return false}
    if self._fat == nil {return false}
    if self._bmi == nil {return false}
    if self._type == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._r) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._x) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._fat) }()
      case 4: try { try decoder.decodeSingularFixed32Field(value: &self._bmi) }()
      case 5: try { try decoder.decodeSingularFixed32Field(value: &self._type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._r {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._x {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._fat {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._bmi {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthBioz, rhs: HisHealthBioz) -> Bool {
    if lhs._r != rhs._r {return false}
    if lhs._x != rhs._x {return false}
    if lhs._fat != rhs._fat {return false}
    if lhs._bmi != rhs._bmi {return false}
    if lhs._type != rhs._type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthBOxy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthBOxy"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "min_oxy"),
    2: .standard(proto: "max_oxy"),
    3: .standard(proto: "agv_oxy"),
  ]

  public var isInitialized: Bool {
    if self._minOxy == nil {return false}
    if self._maxOxy == nil {return false}
    if self._agvOxy == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._minOxy) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._maxOxy) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._agvOxy) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._minOxy {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._maxOxy {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._agvOxy {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthBOxy, rhs: HisHealthBOxy) -> Bool {
    if lhs._minOxy != rhs._minOxy {return false}
    if lhs._maxOxy != rhs._maxOxy {return false}
    if lhs._agvOxy != rhs._agvOxy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthTemp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthTemp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "evi_body"),
    3: .standard(proto: "esti_arm"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._eviBody == nil {return false}
    if self._estiArm == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._eviBody) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._estiArm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._eviBody {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._estiArm {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthTemp, rhs: HisHealthTemp) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._eviBody != rhs._eviBody {return false}
    if lhs._estiArm != rhs._estiArm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthOAQ: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthOAQ"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "O3_conc_ppb"),
    2: .standard(proto: "FAST_AQI"),
    3: .standard(proto: "EPA_AQI"),
  ]

  public var isInitialized: Bool {
    if self._o3ConcPpb == nil {return false}
    if self._fastAqi == nil {return false}
    if self._epaAqi == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._o3ConcPpb) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._fastAqi) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._epaAqi) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._o3ConcPpb {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fastAqi {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._epaAqi {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthOAQ, rhs: HisHealthOAQ) -> Bool {
    if lhs._o3ConcPpb != rhs._o3ConcPpb {return false}
    if lhs._fastAqi != rhs._fastAqi {return false}
    if lhs._epaAqi != rhs._epaAqi {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthIAQ: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthIAQ"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "iaq"),
    2: .same(proto: "tvoc"),
    3: .same(proto: "etoh"),
    4: .same(proto: "eco2"),
  ]

  public var isInitialized: Bool {
    if self._iaq == nil {return false}
    if self._tvoc == nil {return false}
    if self._etoh == nil {return false}
    if self._eco2 == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._iaq) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._tvoc) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._etoh) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self._eco2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._iaq {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._tvoc {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._etoh {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._eco2 {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthIAQ, rhs: HisHealthIAQ) -> Bool {
    if lhs._iaq != rhs._iaq {return false}
    if lhs._tvoc != rhs._tvoc {return false}
    if lhs._etoh != rhs._etoh {return false}
    if lhs._eco2 != rhs._eco2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisHealthHuMiTure: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisHealthHuMiTure"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Humidity"),
    2: .same(proto: "temperature"),
  ]

  public var isInitialized: Bool {
    if self._humidity == nil {return false}
    if self._temperature == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._humidity) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._temperature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._humidity {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._temperature {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisHealthHuMiTure, rhs: HisHealthHuMiTure) -> Bool {
    if lhs._humidity != rhs._humidity {return false}
    if lhs._temperature != rhs._temperature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisDataHealth: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisDataHealth"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
    2: .standard(proto: "sleep_data"),
    3: .standard(proto: "pedo_data"),
    4: .standard(proto: "hr_data"),
    5: .standard(proto: "hrv_data"),
    6: .standard(proto: "bp_data"),
    7: .standard(proto: "af_data"),
    8: .standard(proto: "mdt_data"),
    9: .standard(proto: "mood_data"),
    10: .standard(proto: "breath_data"),
    11: .standard(proto: "bioz_data"),
    12: .standard(proto: "bxoy_data"),
    13: .standard(proto: "temperature_data"),
    14: .standard(proto: "out_act_data"),
    15: .standard(proto: "oaq_data"),
    16: .standard(proto: "iaq_data"),
    17: .standard(proto: "humiture_data"),
  ]

  fileprivate class _StorageClass {
    var _timeStamp: DateTime? = nil
    var _sleepData: HisHealthSleep? = nil
    var _pedoData: HisHealthPedo? = nil
    var _hrData: HisHealthHr? = nil
    var _hrvData: HisHealthHrv? = nil
    var _bpData: HisHealthBp? = nil
    var _afData: HisHealthAf? = nil
    var _mdtData: HisHealthMdt? = nil
    var _moodData: HisHealthMood? = nil
    var _breathData: HisHealthBreath? = nil
    var _biozData: HisHealthBioz? = nil
    var _bxoyData: HisHealthBOxy? = nil
    var _temperatureData: HisHealthTemp? = nil
    var _outActData: HisHealthOutAct? = nil
    var _oaqData: HisHealthOAQ? = nil
    var _iaqData: HisHealthIAQ? = nil
    var _humitureData: HisHealthHuMiTure? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _timeStamp = source._timeStamp
      _sleepData = source._sleepData
      _pedoData = source._pedoData
      _hrData = source._hrData
      _hrvData = source._hrvData
      _bpData = source._bpData
      _afData = source._afData
      _mdtData = source._mdtData
      _moodData = source._moodData
      _breathData = source._breathData
      _biozData = source._biozData
      _bxoyData = source._bxoyData
      _temperatureData = source._temperatureData
      _outActData = source._outActData
      _oaqData = source._oaqData
      _iaqData = source._iaqData
      _humitureData = source._humitureData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._timeStamp == nil {return false}
      if let v = _storage._timeStamp, !v.isInitialized {return false}
      if let v = _storage._sleepData, !v.isInitialized {return false}
      if let v = _storage._pedoData, !v.isInitialized {return false}
      if let v = _storage._hrData, !v.isInitialized {return false}
      if let v = _storage._hrvData, !v.isInitialized {return false}
      if let v = _storage._bpData, !v.isInitialized {return false}
      if let v = _storage._afData, !v.isInitialized {return false}
      if let v = _storage._mdtData, !v.isInitialized {return false}
      if let v = _storage._moodData, !v.isInitialized {return false}
      if let v = _storage._breathData, !v.isInitialized {return false}
      if let v = _storage._biozData, !v.isInitialized {return false}
      if let v = _storage._bxoyData, !v.isInitialized {return false}
      if let v = _storage._temperatureData, !v.isInitialized {return false}
      if let v = _storage._outActData, !v.isInitialized {return false}
      if let v = _storage._oaqData, !v.isInitialized {return false}
      if let v = _storage._iaqData, !v.isInitialized {return false}
      if let v = _storage._humitureData, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._timeStamp) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._sleepData) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._pedoData) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._hrData) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._hrvData) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._bpData) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._afData) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._mdtData) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._moodData) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._breathData) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._biozData) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._bxoyData) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._temperatureData) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._outActData) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._oaqData) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._iaqData) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._humitureData) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._timeStamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._sleepData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._pedoData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._hrData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._hrvData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._bpData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._afData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._mdtData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._moodData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._breathData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._biozData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._bxoyData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._temperatureData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._outActData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._oaqData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._iaqData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._humitureData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisDataHealth, rhs: HisDataHealth) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timeStamp != rhs_storage._timeStamp {return false}
        if _storage._sleepData != rhs_storage._sleepData {return false}
        if _storage._pedoData != rhs_storage._pedoData {return false}
        if _storage._hrData != rhs_storage._hrData {return false}
        if _storage._hrvData != rhs_storage._hrvData {return false}
        if _storage._bpData != rhs_storage._bpData {return false}
        if _storage._afData != rhs_storage._afData {return false}
        if _storage._mdtData != rhs_storage._mdtData {return false}
        if _storage._moodData != rhs_storage._moodData {return false}
        if _storage._breathData != rhs_storage._breathData {return false}
        if _storage._biozData != rhs_storage._biozData {return false}
        if _storage._bxoyData != rhs_storage._bxoyData {return false}
        if _storage._temperatureData != rhs_storage._temperatureData {return false}
        if _storage._outActData != rhs_storage._outActData {return false}
        if _storage._oaqData != rhs_storage._oaqData {return false}
        if _storage._iaqData != rhs_storage._iaqData {return false}
        if _storage._humitureData != rhs_storage._humitureData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
