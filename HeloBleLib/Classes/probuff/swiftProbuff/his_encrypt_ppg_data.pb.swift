// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: his_encrypt_ppg_data.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct HisPPGEncrypt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ppgencrypt: HisDataPPG {
    get {return _ppgencrypt ?? HisDataPPG()}
    set {_ppgencrypt = newValue}
  }
  /// Returns true if `ppgencrypt` has been explicitly set.
  var hasPpgencrypt: Bool {return self._ppgencrypt != nil}
  /// Clears the value of `ppgencrypt`. Subsequent reads from it will return its default value.
  mutating func clearPpgencrypt() {self._ppgencrypt = nil}

  ///random number 
  var random: Data {
    get {return _random ?? Data()}
    set {_random = newValue}
  }
  /// Returns true if `random` has been explicitly set.
  var hasRandom: Bool {return self._random != nil}
  /// Clears the value of `random`. Subsequent reads from it will return its default value.
  mutating func clearRandom() {self._random = nil}

  var bleMac: Data {
    get {return _bleMac ?? Data()}
    set {_bleMac = newValue}
  }
  /// Returns true if `bleMac` has been explicitly set.
  var hasBleMac: Bool {return self._bleMac != nil}
  /// Clears the value of `bleMac`. Subsequent reads from it will return its default value.
  mutating func clearBleMac() {self._bleMac = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _ppgencrypt: HisDataPPG? = nil
  fileprivate var _random: Data? = nil
  fileprivate var _bleMac: Data? = nil
}

struct HisDataPPGEncrypt {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hisPpg: HisPPGEncrypt {
    get {return _hisPpg ?? HisPPGEncrypt()}
    set {_hisPpg = newValue}
  }
  /// Returns true if `hisPpg` has been explicitly set.
  var hasHisPpg: Bool {return self._hisPpg != nil}
  /// Clears the value of `hisPpg`. Subsequent reads from it will return its default value.
  mutating func clearHisPpg() {self._hisPpg = nil}

  var signatureData: Data {
    get {return _signatureData ?? Data()}
    set {_signatureData = newValue}
  }
  /// Returns true if `signatureData` has been explicitly set.
  var hasSignatureData: Bool {return self._signatureData != nil}
  /// Clears the value of `signatureData`. Subsequent reads from it will return its default value.
  mutating func clearSignatureData() {self._signatureData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hisPpg: HisPPGEncrypt? = nil
  fileprivate var _signatureData: Data? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension HisPPGEncrypt: @unchecked Sendable {}
extension HisDataPPGEncrypt: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension HisPPGEncrypt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisPPGEncrypt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ppgencrypt"),
    2: .same(proto: "Random"),
    3: .same(proto: "BleMac"),
  ]

  public var isInitialized: Bool {
    if self._ppgencrypt == nil {return false}
    if self._random == nil {return false}
    if self._bleMac == nil {return false}
    if let v = self._ppgencrypt, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._ppgencrypt) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._random) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self._bleMac) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._ppgencrypt {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._random {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._bleMac {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisPPGEncrypt, rhs: HisPPGEncrypt) -> Bool {
    if lhs._ppgencrypt != rhs._ppgencrypt {return false}
    if lhs._random != rhs._random {return false}
    if lhs._bleMac != rhs._bleMac {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisDataPPGEncrypt: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisDataPPGEncrypt"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "his_ppg"),
    2: .standard(proto: "signature_data"),
  ]

  public var isInitialized: Bool {
    if self._hisPpg == nil {return false}
    if self._signatureData == nil {return false}
    if let v = self._hisPpg, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._hisPpg) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._signatureData) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._hisPpg {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._signatureData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisDataPPGEncrypt, rhs: HisDataPPGEncrypt) -> Bool {
    if lhs._hisPpg != rhs._hisPpg {return false}
    if lhs._signatureData != rhs._signatureData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
