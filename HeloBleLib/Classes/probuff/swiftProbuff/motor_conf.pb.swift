// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: motor_conf.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum VibrateType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case alarmClock // = 0
  case incomingCall // = 1
  case sms // = 2
  case sedentariness // = 3
  case charging // = 4
  case calendar // = 5
  case distanceAlarm // = 6
  case heartrateAlarm // = 7
  case others // = 8

  init() {
    self = .alarmClock
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .alarmClock
    case 1: self = .incomingCall
    case 2: self = .sms
    case 3: self = .sedentariness
    case 4: self = .charging
    case 5: self = .calendar
    case 6: self = .distanceAlarm
    case 7: self = .heartrateAlarm
    case 8: self = .others
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .alarmClock: return 0
    case .incomingCall: return 1
    case .sms: return 2
    case .sedentariness: return 3
    case .charging: return 4
    case .calendar: return 5
    case .distanceAlarm: return 6
    case .heartrateAlarm: return 7
    case .others: return 8
    }
  }

}

#if swift(>=4.2)

extension VibrateType: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum MotorOperation: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case config // = 0
  case vibrate // = 1

  init() {
    self = .config
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .config
    case 1: self = .vibrate
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .config: return 0
    case .vibrate: return 1
    }
  }

}

#if swift(>=4.2)

extension MotorOperation: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

/// response of MotorConf
struct MotorConfirm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operation: MotorOperation {
    get {return _operation ?? .config}
    set {_operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  var hasOperation: Bool {return self._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  mutating func clearOperation() {self._operation = nil}

  var ret: Bool {
    get {return _ret ?? false}
    set {_ret = newValue}
  }
  /// Returns true if `ret` has been explicitly set.
  var hasRet: Bool {return self._ret != nil}
  /// Clears the value of `ret`. Subsequent reads from it will return its default value.
  mutating func clearRet() {self._ret = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _operation: MotorOperation? = nil
  fileprivate var _ret: Bool? = nil
}

struct MotorParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var modeNum: UInt32 {
    get {return _modeNum ?? 0}
    set {_modeNum = newValue}
  }
  /// Returns true if `modeNum` has been explicitly set.
  var hasModeNum: Bool {return self._modeNum != nil}
  /// Clears the value of `modeNum`. Subsequent reads from it will return its default value.
  mutating func clearModeNum() {self._modeNum = nil}

  var typeNum: UInt32 {
    get {return _typeNum ?? 0}
    set {_typeNum = newValue}
  }
  /// Returns true if `typeNum` has been explicitly set.
  var hasTypeNum: Bool {return self._typeNum != nil}
  /// Clears the value of `typeNum`. Subsequent reads from it will return its default value.
  mutating func clearTypeNum() {self._typeNum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _modeNum: UInt32? = nil
  fileprivate var _typeNum: UInt32? = nil
}

struct MotorConfSubscriber {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: UInt32 {
    get {return _hash ?? 0}
    set {_hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  var hasHash: Bool {return self._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  mutating func clearHash() {self._hash = nil}

  var data: MotorConfSubscriber.OneOf_Data? = nil

  var params: MotorParams {
    get {
      if case .params(let v)? = data {return v}
      return MotorParams()
    }
    set {data = .params(newValue)}
  }

  var confirm: MotorConfirm {
    get {
      if case .confirm(let v)? = data {return v}
      return MotorConfirm()
    }
    set {data = .confirm(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Data: Equatable {
    case params(MotorParams)
    case confirm(MotorConfirm)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .params: return {
        guard case .params(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .confirm: return {
        guard case .confirm(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      }
    }

  #if !swift(>=4.1)
    static func ==(lhs: MotorConfSubscriber.OneOf_Data, rhs: MotorConfSubscriber.OneOf_Data) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.params, .params): return {
        guard case .params(let l) = lhs, case .params(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.confirm, .confirm): return {
        guard case .confirm(let l) = lhs, case .confirm(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _hash: UInt32? = nil
}

struct VibrateCnf {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: VibrateType {
    get {return _type ?? .alarmClock}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var mode: UInt32 {
    get {return _mode ?? 0}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var round: UInt32 {
    get {return _round ?? 0}
    set {_round = newValue}
  }
  /// Returns true if `round` has been explicitly set.
  var hasRound: Bool {return self._round != nil}
  /// Clears the value of `round`. Subsequent reads from it will return its default value.
  mutating func clearRound() {self._round = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _type: VibrateType? = nil
  fileprivate var _mode: UInt32? = nil
  fileprivate var _round: UInt32? = nil
}

struct MotorConf {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: UInt32 {
    get {return _hash ?? 0}
    set {_hash = newValue}
  }
  /// Returns true if `hash` has been explicitly set.
  var hasHash: Bool {return self._hash != nil}
  /// Clears the value of `hash`. Subsequent reads from it will return its default value.
  mutating func clearHash() {self._hash = nil}

  var conf: [VibrateCnf] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hash: UInt32? = nil
}

struct MotorVibrate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mode: UInt32 {
    get {return _mode ?? 0}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var round: UInt32 {
    get {return _round ?? 0}
    set {_round = newValue}
  }
  /// Returns true if `round` has been explicitly set.
  var hasRound: Bool {return self._round != nil}
  /// Clears the value of `round`. Subsequent reads from it will return its default value.
  mutating func clearRound() {self._round = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _mode: UInt32? = nil
  fileprivate var _round: UInt32? = nil
}

struct MotorConfNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operation: MotorOperation {
    get {return _operation ?? .config}
    set {_operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  var hasOperation: Bool {return self._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  mutating func clearOperation() {self._operation = nil}

  var data: MotorConfNotification.OneOf_Data? = nil

  var conf: MotorConf {
    get {
      if case .conf(let v)? = data {return v}
      return MotorConf()
    }
    set {data = .conf(newValue)}
  }

  var vibrate: MotorVibrate {
    get {
      if case .vibrate(let v)? = data {return v}
      return MotorVibrate()
    }
    set {data = .vibrate(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Data: Equatable {
    case conf(MotorConf)
    case vibrate(MotorVibrate)

    fileprivate var isInitialized: Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch self {
      case .conf: return {
        guard case .conf(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      case .vibrate: return {
        guard case .vibrate(let v) = self else { preconditionFailure() }
        return v.isInitialized
      }()
      }
    }

  #if !swift(>=4.1)
    static func ==(lhs: MotorConfNotification.OneOf_Data, rhs: MotorConfNotification.OneOf_Data) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.conf, .conf): return {
        guard case .conf(let l) = lhs, case .conf(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      case (.vibrate, .vibrate): return {
        guard case .vibrate(let l) = lhs, case .vibrate(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _operation: MotorOperation? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension VibrateType: @unchecked Sendable {}
extension MotorOperation: @unchecked Sendable {}
extension MotorConfirm: @unchecked Sendable {}
extension MotorParams: @unchecked Sendable {}
extension MotorConfSubscriber: @unchecked Sendable {}
extension MotorConfSubscriber.OneOf_Data: @unchecked Sendable {}
extension VibrateCnf: @unchecked Sendable {}
extension MotorConf: @unchecked Sendable {}
extension MotorVibrate: @unchecked Sendable {}
extension MotorConfNotification: @unchecked Sendable {}
extension MotorConfNotification.OneOf_Data: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension VibrateType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALARM_CLOCK"),
    1: .same(proto: "INCOMING_CALL"),
    2: .same(proto: "SMS"),
    3: .same(proto: "SEDENTARINESS"),
    4: .same(proto: "CHARGING"),
    5: .same(proto: "CALENDAR"),
    6: .same(proto: "DISTANCE_ALARM"),
    7: .same(proto: "HEARTRATE_ALARM"),
    8: .same(proto: "OTHERS"),
  ]
}

extension MotorOperation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONFIG"),
    1: .same(proto: "VIBRATE"),
  ]
}

extension MotorConfirm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MotorConfirm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .same(proto: "ret"),
  ]

  public var isInitialized: Bool {
    if self._operation == nil {return false}
    if self._ret == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._operation) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._ret) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._operation {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._ret {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MotorConfirm, rhs: MotorConfirm) -> Bool {
    if lhs._operation != rhs._operation {return false}
    if lhs._ret != rhs._ret {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MotorParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MotorParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mode_num"),
    2: .standard(proto: "type_num"),
  ]

  public var isInitialized: Bool {
    if self._modeNum == nil {return false}
    if self._typeNum == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._modeNum) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._typeNum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._modeNum {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._typeNum {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MotorParams, rhs: MotorParams) -> Bool {
    if lhs._modeNum != rhs._modeNum {return false}
    if lhs._typeNum != rhs._typeNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MotorConfSubscriber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MotorConfSubscriber"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "params"),
    3: .same(proto: "confirm"),
  ]

  public var isInitialized: Bool {
    if self._hash == nil {return false}
    if let v = self.data, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._hash) }()
      case 2: try {
        var v: MotorParams?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .params(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .params(v)
        }
      }()
      case 3: try {
        var v: MotorConfirm?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .confirm(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .confirm(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._hash {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    switch self.data {
    case .params?: try {
      guard case .params(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .confirm?: try {
      guard case .confirm(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MotorConfSubscriber, rhs: MotorConfSubscriber) -> Bool {
    if lhs._hash != rhs._hash {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension VibrateCnf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "VibrateCnf"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "mode"),
    3: .same(proto: "round"),
  ]

  public var isInitialized: Bool {
    if self._type == nil {return false}
    if self._mode == nil {return false}
    if self._round == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._mode) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._round) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._mode {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._round {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: VibrateCnf, rhs: VibrateCnf) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._mode != rhs._mode {return false}
    if lhs._round != rhs._round {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MotorConf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MotorConf"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "conf"),
  ]

  public var isInitialized: Bool {
    if self._hash == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.conf) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._hash) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.conf) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._hash {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    if !self.conf.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.conf, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MotorConf, rhs: MotorConf) -> Bool {
    if lhs._hash != rhs._hash {return false}
    if lhs.conf != rhs.conf {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MotorVibrate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MotorVibrate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
    2: .same(proto: "round"),
  ]

  public var isInitialized: Bool {
    if self._mode == nil {return false}
    if self._round == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._mode) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._round) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._mode {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._round {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MotorVibrate, rhs: MotorVibrate) -> Bool {
    if lhs._mode != rhs._mode {return false}
    if lhs._round != rhs._round {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension MotorConfNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MotorConfNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .same(proto: "conf"),
    3: .same(proto: "vibrate"),
  ]

  public var isInitialized: Bool {
    if self._operation == nil {return false}
    if let v = self.data, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._operation) }()
      case 2: try {
        var v: MotorConf?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .conf(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .conf(v)
        }
      }()
      case 3: try {
        var v: MotorVibrate?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .vibrate(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .vibrate(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._operation {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    switch self.data {
    case .conf?: try {
      guard case .conf(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .vibrate?: try {
      guard case .vibrate(let v)? = self.data else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MotorConfNotification, rhs: MotorConfNotification) -> Bool {
    if lhs._operation != rhs._operation {return false}
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
