// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ThirdParty_health_data.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum MEASURE_MODE: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case manual // = 0
  case auto // = 1

  init() {
    self = .manual
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .manual
    case 1: self = .auto
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .manual: return 0
    case .auto: return 1
    }
  }

}

#if swift(>=4.2)

extension MEASURE_MODE: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct ThirdPartyHealthBp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sbp: UInt32 {
    get {return _sbp ?? 0}
    set {_sbp = newValue}
  }
  /// Returns true if `sbp` has been explicitly set.
  var hasSbp: Bool {return self._sbp != nil}
  /// Clears the value of `sbp`. Subsequent reads from it will return its default value.
  mutating func clearSbp() {self._sbp = nil}

  var dbp: UInt32 {
    get {return _dbp ?? 0}
    set {_dbp = newValue}
  }
  /// Returns true if `dbp` has been explicitly set.
  var hasDbp: Bool {return self._dbp != nil}
  /// Clears the value of `dbp`. Subsequent reads from it will return its default value.
  mutating func clearDbp() {self._dbp = nil}

  var hr: UInt32 {
    get {return _hr ?? 0}
    set {_hr = newValue}
  }
  /// Returns true if `hr` has been explicitly set.
  var hasHr: Bool {return self._hr != nil}
  /// Clears the value of `hr`. Subsequent reads from it will return its default value.
  mutating func clearHr() {self._hr = nil}

  var pulse: UInt32 {
    get {return _pulse ?? 0}
    set {_pulse = newValue}
  }
  /// Returns true if `pulse` has been explicitly set.
  var hasPulse: Bool {return self._pulse != nil}
  /// Clears the value of `pulse`. Subsequent reads from it will return its default value.
  mutating func clearPulse() {self._pulse = nil}

  var time: DateTime {
    get {return _time ?? DateTime()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var mode: MEASURE_MODE {
    get {return _mode ?? .manual}
    set {_mode = newValue}
  }
  /// Returns true if `mode` has been explicitly set.
  var hasMode: Bool {return self._mode != nil}
  /// Clears the value of `mode`. Subsequent reads from it will return its default value.
  mutating func clearMode() {self._mode = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _sbp: UInt32? = nil
  fileprivate var _dbp: UInt32? = nil
  fileprivate var _hr: UInt32? = nil
  fileprivate var _pulse: UInt32? = nil
  fileprivate var _time: DateTime? = nil
  fileprivate var _mode: MEASURE_MODE? = nil
}

struct ThirdPartyHealthScale {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var weight: UInt32 {
    get {return _weight ?? 0}
    set {_weight = newValue}
  }
  /// Returns true if `weight` has been explicitly set.
  var hasWeight: Bool {return self._weight != nil}
  /// Clears the value of `weight`. Subsequent reads from it will return its default value.
  mutating func clearWeight() {self._weight = nil}

  var impedance: UInt32 {
    get {return _impedance ?? 0}
    set {_impedance = newValue}
  }
  /// Returns true if `impedance` has been explicitly set.
  var hasImpedance: Bool {return self._impedance != nil}
  /// Clears the value of `impedance`. Subsequent reads from it will return its default value.
  mutating func clearImpedance() {self._impedance = nil}

  var uints: UInt32 {
    get {return _uints ?? 0}
    set {_uints = newValue}
  }
  /// Returns true if `uints` has been explicitly set.
  var hasUints: Bool {return self._uints != nil}
  /// Clears the value of `uints`. Subsequent reads from it will return its default value.
  mutating func clearUints() {self._uints = nil}

  var bodyFatPercentage: UInt32 {
    get {return _bodyFatPercentage ?? 0}
    set {_bodyFatPercentage = newValue}
  }
  /// Returns true if `bodyFatPercentage` has been explicitly set.
  var hasBodyFatPercentage: Bool {return self._bodyFatPercentage != nil}
  /// Clears the value of `bodyFatPercentage`. Subsequent reads from it will return its default value.
  mutating func clearBodyFatPercentage() {self._bodyFatPercentage = nil}

  var time: DateTime {
    get {return _time ?? DateTime()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _weight: UInt32? = nil
  fileprivate var _impedance: UInt32? = nil
  fileprivate var _uints: UInt32? = nil
  fileprivate var _bodyFatPercentage: UInt32? = nil
  fileprivate var _time: DateTime? = nil
}

struct ThirdPartyHealthSpo2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bpm: UInt32 {
    get {return _bpm ?? 0}
    set {_bpm = newValue}
  }
  /// Returns true if `bpm` has been explicitly set.
  var hasBpm: Bool {return self._bpm != nil}
  /// Clears the value of `bpm`. Subsequent reads from it will return its default value.
  mutating func clearBpm() {self._bpm = nil}

  var spo2: UInt32 {
    get {return _spo2 ?? 0}
    set {_spo2 = newValue}
  }
  /// Returns true if `spo2` has been explicitly set.
  var hasSpo2: Bool {return self._spo2 != nil}
  /// Clears the value of `spo2`. Subsequent reads from it will return its default value.
  mutating func clearSpo2() {self._spo2 = nil}

  var pi: UInt32 {
    get {return _pi ?? 0}
    set {_pi = newValue}
  }
  /// Returns true if `pi` has been explicitly set.
  var hasPi: Bool {return self._pi != nil}
  /// Clears the value of `pi`. Subsequent reads from it will return its default value.
  mutating func clearPi() {self._pi = nil}

  var time: DateTime {
    get {return _time ?? DateTime()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bpm: UInt32? = nil
  fileprivate var _spo2: UInt32? = nil
  fileprivate var _pi: UInt32? = nil
  fileprivate var _time: DateTime? = nil
}

struct ThirdPartyHealthTemp {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bodyTemp: UInt32 {
    get {return _bodyTemp ?? 0}
    set {_bodyTemp = newValue}
  }
  /// Returns true if `bodyTemp` has been explicitly set.
  var hasBodyTemp: Bool {return self._bodyTemp != nil}
  /// Clears the value of `bodyTemp`. Subsequent reads from it will return its default value.
  mutating func clearBodyTemp() {self._bodyTemp = nil}

  var time: DateTime {
    get {return _time ?? DateTime()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bodyTemp: UInt32? = nil
  fileprivate var _time: DateTime? = nil
}

struct ThirdPartyHealthGlu {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var glu: UInt32 {
    get {return _glu ?? 0}
    set {_glu = newValue}
  }
  /// Returns true if `glu` has been explicitly set.
  var hasGlu: Bool {return self._glu != nil}
  /// Clears the value of `glu`. Subsequent reads from it will return its default value.
  mutating func clearGlu() {self._glu = nil}

  var time: DateTime {
    get {return _time ?? DateTime()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _glu: UInt32? = nil
  fileprivate var _time: DateTime? = nil
}

struct ThirdPartyHealthBloodKetones {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var bloodKetones: UInt32 {
    get {return _bloodKetones ?? 0}
    set {_bloodKetones = newValue}
  }
  /// Returns true if `bloodKetones` has been explicitly set.
  var hasBloodKetones: Bool {return self._bloodKetones != nil}
  /// Clears the value of `bloodKetones`. Subsequent reads from it will return its default value.
  mutating func clearBloodKetones() {self._bloodKetones = nil}

  var time: DateTime {
    get {return _time ?? DateTime()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _bloodKetones: UInt32? = nil
  fileprivate var _time: DateTime? = nil
}

struct ThirdPartyHealthUricAcid {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uricAcid: UInt32 {
    get {return _uricAcid ?? 0}
    set {_uricAcid = newValue}
  }
  /// Returns true if `uricAcid` has been explicitly set.
  var hasUricAcid: Bool {return self._uricAcid != nil}
  /// Clears the value of `uricAcid`. Subsequent reads from it will return its default value.
  mutating func clearUricAcid() {self._uricAcid = nil}

  var time: DateTime {
    get {return _time ?? DateTime()}
    set {_time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return self._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {self._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _uricAcid: UInt32? = nil
  fileprivate var _time: DateTime? = nil
}

struct ThirdPartyDataHealth {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var devName: String {
    get {return _storage._devName ?? String()}
    set {_uniqueStorage()._devName = newValue}
  }
  /// Returns true if `devName` has been explicitly set.
  var hasDevName: Bool {return _storage._devName != nil}
  /// Clears the value of `devName`. Subsequent reads from it will return its default value.
  mutating func clearDevName() {_uniqueStorage()._devName = nil}

  var macAddr: String {
    get {return _storage._macAddr ?? String()}
    set {_uniqueStorage()._macAddr = newValue}
  }
  /// Returns true if `macAddr` has been explicitly set.
  var hasMacAddr: Bool {return _storage._macAddr != nil}
  /// Clears the value of `macAddr`. Subsequent reads from it will return its default value.
  mutating func clearMacAddr() {_uniqueStorage()._macAddr = nil}

  var devType: UInt32 {
    get {return _storage._devType ?? 0}
    set {_uniqueStorage()._devType = newValue}
  }
  /// Returns true if `devType` has been explicitly set.
  var hasDevType: Bool {return _storage._devType != nil}
  /// Clears the value of `devType`. Subsequent reads from it will return its default value.
  mutating func clearDevType() {_uniqueStorage()._devType = nil}

  var user: UInt32 {
    get {return _storage._user ?? 0}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  mutating func clearUser() {_uniqueStorage()._user = nil}

  var bpData: ThirdPartyHealthBp {
    get {return _storage._bpData ?? ThirdPartyHealthBp()}
    set {_uniqueStorage()._bpData = newValue}
  }
  /// Returns true if `bpData` has been explicitly set.
  var hasBpData: Bool {return _storage._bpData != nil}
  /// Clears the value of `bpData`. Subsequent reads from it will return its default value.
  mutating func clearBpData() {_uniqueStorage()._bpData = nil}

  var scaleData: ThirdPartyHealthScale {
    get {return _storage._scaleData ?? ThirdPartyHealthScale()}
    set {_uniqueStorage()._scaleData = newValue}
  }
  /// Returns true if `scaleData` has been explicitly set.
  var hasScaleData: Bool {return _storage._scaleData != nil}
  /// Clears the value of `scaleData`. Subsequent reads from it will return its default value.
  mutating func clearScaleData() {_uniqueStorage()._scaleData = nil}

  var spo2Data: ThirdPartyHealthSpo2 {
    get {return _storage._spo2Data ?? ThirdPartyHealthSpo2()}
    set {_uniqueStorage()._spo2Data = newValue}
  }
  /// Returns true if `spo2Data` has been explicitly set.
  var hasSpo2Data: Bool {return _storage._spo2Data != nil}
  /// Clears the value of `spo2Data`. Subsequent reads from it will return its default value.
  mutating func clearSpo2Data() {_uniqueStorage()._spo2Data = nil}

  var tempData: ThirdPartyHealthTemp {
    get {return _storage._tempData ?? ThirdPartyHealthTemp()}
    set {_uniqueStorage()._tempData = newValue}
  }
  /// Returns true if `tempData` has been explicitly set.
  var hasTempData: Bool {return _storage._tempData != nil}
  /// Clears the value of `tempData`. Subsequent reads from it will return its default value.
  mutating func clearTempData() {_uniqueStorage()._tempData = nil}

  var gluData: ThirdPartyHealthGlu {
    get {return _storage._gluData ?? ThirdPartyHealthGlu()}
    set {_uniqueStorage()._gluData = newValue}
  }
  /// Returns true if `gluData` has been explicitly set.
  var hasGluData: Bool {return _storage._gluData != nil}
  /// Clears the value of `gluData`. Subsequent reads from it will return its default value.
  mutating func clearGluData() {_uniqueStorage()._gluData = nil}

  var bloodKetonesData: ThirdPartyHealthBloodKetones {
    get {return _storage._bloodKetonesData ?? ThirdPartyHealthBloodKetones()}
    set {_uniqueStorage()._bloodKetonesData = newValue}
  }
  /// Returns true if `bloodKetonesData` has been explicitly set.
  var hasBloodKetonesData: Bool {return _storage._bloodKetonesData != nil}
  /// Clears the value of `bloodKetonesData`. Subsequent reads from it will return its default value.
  mutating func clearBloodKetonesData() {_uniqueStorage()._bloodKetonesData = nil}

  var uricAcidData: ThirdPartyHealthUricAcid {
    get {return _storage._uricAcidData ?? ThirdPartyHealthUricAcid()}
    set {_uniqueStorage()._uricAcidData = newValue}
  }
  /// Returns true if `uricAcidData` has been explicitly set.
  var hasUricAcidData: Bool {return _storage._uricAcidData != nil}
  /// Clears the value of `uricAcidData`. Subsequent reads from it will return its default value.
  mutating func clearUricAcidData() {_uniqueStorage()._uricAcidData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct HisDataThirdParty {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dataHealth: ThirdPartyDataHealth {
    get {return _dataHealth ?? ThirdPartyDataHealth()}
    set {_dataHealth = newValue}
  }
  /// Returns true if `dataHealth` has been explicitly set.
  var hasDataHealth: Bool {return self._dataHealth != nil}
  /// Clears the value of `dataHealth`. Subsequent reads from it will return its default value.
  mutating func clearDataHealth() {self._dataHealth = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _dataHealth: ThirdPartyDataHealth? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension MEASURE_MODE: @unchecked Sendable {}
extension ThirdPartyHealthBp: @unchecked Sendable {}
extension ThirdPartyHealthScale: @unchecked Sendable {}
extension ThirdPartyHealthSpo2: @unchecked Sendable {}
extension ThirdPartyHealthTemp: @unchecked Sendable {}
extension ThirdPartyHealthGlu: @unchecked Sendable {}
extension ThirdPartyHealthBloodKetones: @unchecked Sendable {}
extension ThirdPartyHealthUricAcid: @unchecked Sendable {}
extension ThirdPartyDataHealth: @unchecked Sendable {}
extension HisDataThirdParty: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MEASURE_MODE: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MANUAL"),
    1: .same(proto: "AUTO"),
  ]
}

extension ThirdPartyHealthBp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThirdPartyHealthBp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sbp"),
    2: .same(proto: "dbp"),
    3: .same(proto: "hr"),
    4: .same(proto: "pulse"),
    5: .same(proto: "time"),
    6: .same(proto: "MODE"),
  ]

  public var isInitialized: Bool {
    if self._sbp == nil {return false}
    if self._dbp == nil {return false}
    if self._hr == nil {return false}
    if self._pulse == nil {return false}
    if self._time == nil {return false}
    if self._mode == nil {return false}
    if let v = self._time, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._sbp) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._dbp) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._hr) }()
      case 4: try { try decoder.decodeSingularFixed32Field(value: &self._pulse) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._mode) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sbp {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._dbp {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._hr {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._pulse {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._mode {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThirdPartyHealthBp, rhs: ThirdPartyHealthBp) -> Bool {
    if lhs._sbp != rhs._sbp {return false}
    if lhs._dbp != rhs._dbp {return false}
    if lhs._hr != rhs._hr {return false}
    if lhs._pulse != rhs._pulse {return false}
    if lhs._time != rhs._time {return false}
    if lhs._mode != rhs._mode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThirdPartyHealthScale: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThirdPartyHealthScale"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "weight"),
    2: .same(proto: "impedance"),
    3: .same(proto: "uints"),
    4: .standard(proto: "body_fat_percentage"),
    5: .same(proto: "time"),
  ]

  public var isInitialized: Bool {
    if self._weight == nil {return false}
    if self._impedance == nil {return false}
    if self._uints == nil {return false}
    if self._bodyFatPercentage == nil {return false}
    if self._time == nil {return false}
    if let v = self._time, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._weight) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._impedance) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._uints) }()
      case 4: try { try decoder.decodeSingularFixed32Field(value: &self._bodyFatPercentage) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._weight {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._impedance {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._uints {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._bodyFatPercentage {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThirdPartyHealthScale, rhs: ThirdPartyHealthScale) -> Bool {
    if lhs._weight != rhs._weight {return false}
    if lhs._impedance != rhs._impedance {return false}
    if lhs._uints != rhs._uints {return false}
    if lhs._bodyFatPercentage != rhs._bodyFatPercentage {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThirdPartyHealthSpo2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThirdPartyHealthSpo2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bpm"),
    2: .same(proto: "spo2"),
    3: .same(proto: "pi"),
    4: .same(proto: "time"),
  ]

  public var isInitialized: Bool {
    if self._bpm == nil {return false}
    if self._spo2 == nil {return false}
    if self._pi == nil {return false}
    if self._time == nil {return false}
    if let v = self._time, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._bpm) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._spo2) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._pi) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._bpm {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._spo2 {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._pi {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThirdPartyHealthSpo2, rhs: ThirdPartyHealthSpo2) -> Bool {
    if lhs._bpm != rhs._bpm {return false}
    if lhs._spo2 != rhs._spo2 {return false}
    if lhs._pi != rhs._pi {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThirdPartyHealthTemp: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThirdPartyHealthTemp"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "body_temp"),
    2: .same(proto: "time"),
  ]

  public var isInitialized: Bool {
    if self._bodyTemp == nil {return false}
    if self._time == nil {return false}
    if let v = self._time, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._bodyTemp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._bodyTemp {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThirdPartyHealthTemp, rhs: ThirdPartyHealthTemp) -> Bool {
    if lhs._bodyTemp != rhs._bodyTemp {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThirdPartyHealthGlu: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThirdPartyHealthGlu"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "glu"),
    2: .same(proto: "time"),
  ]

  public var isInitialized: Bool {
    if self._glu == nil {return false}
    if self._time == nil {return false}
    if let v = self._time, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._glu) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._glu {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThirdPartyHealthGlu, rhs: ThirdPartyHealthGlu) -> Bool {
    if lhs._glu != rhs._glu {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThirdPartyHealthBloodKetones: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThirdPartyHealthBloodKetones"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "BloodKetones"),
    2: .same(proto: "time"),
  ]

  public var isInitialized: Bool {
    if self._bloodKetones == nil {return false}
    if self._time == nil {return false}
    if let v = self._time, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._bloodKetones) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._bloodKetones {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThirdPartyHealthBloodKetones, rhs: ThirdPartyHealthBloodKetones) -> Bool {
    if lhs._bloodKetones != rhs._bloodKetones {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThirdPartyHealthUricAcid: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThirdPartyHealthUricAcid"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "UricAcid"),
    2: .same(proto: "time"),
  ]

  public var isInitialized: Bool {
    if self._uricAcid == nil {return false}
    if self._time == nil {return false}
    if let v = self._time, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._uricAcid) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._time) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._uricAcid {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._time {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThirdPartyHealthUricAcid, rhs: ThirdPartyHealthUricAcid) -> Bool {
    if lhs._uricAcid != rhs._uricAcid {return false}
    if lhs._time != rhs._time {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThirdPartyDataHealth: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThirdPartyDataHealth"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "dev_name"),
    2: .standard(proto: "mac_addr"),
    3: .standard(proto: "dev_type"),
    4: .same(proto: "user"),
    5: .standard(proto: "bp_data"),
    6: .standard(proto: "scale_data"),
    7: .standard(proto: "Spo2_data"),
    8: .standard(proto: "Temp_data"),
    9: .standard(proto: "Glu_data"),
    10: .standard(proto: "BloodKetones_data"),
    11: .standard(proto: "UricAcid_data"),
  ]

  fileprivate class _StorageClass {
    var _devName: String? = nil
    var _macAddr: String? = nil
    var _devType: UInt32? = nil
    var _user: UInt32? = nil
    var _bpData: ThirdPartyHealthBp? = nil
    var _scaleData: ThirdPartyHealthScale? = nil
    var _spo2Data: ThirdPartyHealthSpo2? = nil
    var _tempData: ThirdPartyHealthTemp? = nil
    var _gluData: ThirdPartyHealthGlu? = nil
    var _bloodKetonesData: ThirdPartyHealthBloodKetones? = nil
    var _uricAcidData: ThirdPartyHealthUricAcid? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _devName = source._devName
      _macAddr = source._macAddr
      _devType = source._devType
      _user = source._user
      _bpData = source._bpData
      _scaleData = source._scaleData
      _spo2Data = source._spo2Data
      _tempData = source._tempData
      _gluData = source._gluData
      _bloodKetonesData = source._bloodKetonesData
      _uricAcidData = source._uricAcidData
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._devName == nil {return false}
      if _storage._macAddr == nil {return false}
      if _storage._devType == nil {return false}
      if _storage._user == nil {return false}
      if let v = _storage._bpData, !v.isInitialized {return false}
      if let v = _storage._scaleData, !v.isInitialized {return false}
      if let v = _storage._spo2Data, !v.isInitialized {return false}
      if let v = _storage._tempData, !v.isInitialized {return false}
      if let v = _storage._gluData, !v.isInitialized {return false}
      if let v = _storage._bloodKetonesData, !v.isInitialized {return false}
      if let v = _storage._uricAcidData, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._devName) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._macAddr) }()
        case 3: try { try decoder.decodeSingularFixed32Field(value: &_storage._devType) }()
        case 4: try { try decoder.decodeSingularFixed32Field(value: &_storage._user) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._bpData) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._scaleData) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._spo2Data) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._tempData) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._gluData) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._bloodKetonesData) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._uricAcidData) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._devName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._macAddr {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._devType {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._user {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._bpData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._scaleData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._spo2Data {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._tempData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._gluData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._bloodKetonesData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._uricAcidData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThirdPartyDataHealth, rhs: ThirdPartyDataHealth) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._devName != rhs_storage._devName {return false}
        if _storage._macAddr != rhs_storage._macAddr {return false}
        if _storage._devType != rhs_storage._devType {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._bpData != rhs_storage._bpData {return false}
        if _storage._scaleData != rhs_storage._scaleData {return false}
        if _storage._spo2Data != rhs_storage._spo2Data {return false}
        if _storage._tempData != rhs_storage._tempData {return false}
        if _storage._gluData != rhs_storage._gluData {return false}
        if _storage._bloodKetonesData != rhs_storage._bloodKetonesData {return false}
        if _storage._uricAcidData != rhs_storage._uricAcidData {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisDataThirdParty: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisDataThirdParty"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "DataHealth"),
  ]

  public var isInitialized: Bool {
    if let v = self._dataHealth, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dataHealth) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dataHealth {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisDataThirdParty, rhs: HisDataThirdParty) -> Bool {
    if lhs._dataHealth != rhs._dataHealth {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
