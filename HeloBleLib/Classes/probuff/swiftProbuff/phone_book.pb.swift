// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: phone_book.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum PhoneOperation: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case add // = 1
  case remove // = 2
  case clear // = 3

  init() {
    self = .add
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .add
    case 2: self = .remove
    case 3: self = .clear
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .add: return 1
    case .remove: return 2
    case .clear: return 3
    }
  }

}

#if swift(>=4.2)

extension PhoneOperation: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum PhoneResponse: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case succeed // = 1
  case fail // = 2
  case exist // = 3

  init() {
    self = .succeed
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .succeed
    case 2: self = .fail
    case 3: self = .exist
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .succeed: return 1
    case .fail: return 2
    case .exist: return 3
    }
  }

}

#if swift(>=4.2)

extension PhoneResponse: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct SOSGNSSINFO {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var longitude: Float {
    get {return _longitude ?? 0}
    set {_longitude = newValue}
  }
  /// Returns true if `longitude` has been explicitly set.
  var hasLongitude: Bool {return self._longitude != nil}
  /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
  mutating func clearLongitude() {self._longitude = nil}

  var latitude: Float {
    get {return _latitude ?? 0}
    set {_latitude = newValue}
  }
  /// Returns true if `latitude` has been explicitly set.
  var hasLatitude: Bool {return self._latitude != nil}
  /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
  mutating func clearLatitude() {self._latitude = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _longitude: Float? = nil
  fileprivate var _latitude: Float? = nil
}

struct HrAlarmV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hr: UInt32 {
    get {return _hr ?? 0}
    set {_hr = newValue}
  }
  /// Returns true if `hr` has been explicitly set.
  var hasHr: Bool {return self._hr != nil}
  /// Clears the value of `hr`. Subsequent reads from it will return its default value.
  mutating func clearHr() {self._hr = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _hr: UInt32? = nil
}

struct Spo2AlarmV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var spo2: UInt32 {
    get {return _spo2 ?? 0}
    set {_spo2 = newValue}
  }
  /// Returns true if `spo2` has been explicitly set.
  var hasSpo2: Bool {return self._spo2 != nil}
  /// Clears the value of `spo2`. Subsequent reads from it will return its default value.
  mutating func clearSpo2() {self._spo2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _spo2: UInt32? = nil
}

struct ThrombusAlarmV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var thrombusAlarm: Bool {
    get {return _thrombusAlarm ?? false}
    set {_thrombusAlarm = newValue}
  }
  /// Returns true if `thrombusAlarm` has been explicitly set.
  var hasThrombusAlarm: Bool {return self._thrombusAlarm != nil}
  /// Clears the value of `thrombusAlarm`. Subsequent reads from it will return its default value.
  mutating func clearThrombusAlarm() {self._thrombusAlarm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _thrombusAlarm: Bool? = nil
}

struct FallAlarmConfV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fallAlarm: Bool {
    get {return _fallAlarm ?? false}
    set {_fallAlarm = newValue}
  }
  /// Returns true if `fallAlarm` has been explicitly set.
  var hasFallAlarm: Bool {return self._fallAlarm != nil}
  /// Clears the value of `fallAlarm`. Subsequent reads from it will return its default value.
  mutating func clearFallAlarm() {self._fallAlarm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fallAlarm: Bool? = nil
}

struct PhoneAlarminfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _timeStamp ?? DateTime()}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  ///Not wearing status information warning report
  var wearstate: Bool {
    get {return _wearstate ?? false}
    set {_wearstate = newValue}
  }
  /// Returns true if `wearstate` has been explicitly set.
  var hasWearstate: Bool {return self._wearstate != nil}
  /// Clears the value of `wearstate`. Subsequent reads from it will return its default value.
  mutating func clearWearstate() {self._wearstate = nil}

  ///sleep status information warning report
  var sleepstate: Bool {
    get {return _sleepstate ?? false}
    set {_sleepstate = newValue}
  }
  /// Returns true if `sleepstate` has been explicitly set.
  var hasSleepstate: Bool {return self._sleepstate != nil}
  /// Clears the value of `sleepstate`. Subsequent reads from it will return its default value.
  mutating func clearSleepstate() {self._sleepstate = nil}

  ///SOS warning information reporting
  var gnssinfo: SOSGNSSINFO {
    get {return _gnssinfo ?? SOSGNSSINFO()}
    set {_gnssinfo = newValue}
  }
  /// Returns true if `gnssinfo` has been explicitly set.
  var hasGnssinfo: Bool {return self._gnssinfo != nil}
  /// Clears the value of `gnssinfo`. Subsequent reads from it will return its default value.
  mutating func clearGnssinfo() {self._gnssinfo = nil}

  ///Low battery warning information reporting
  var lowpowerPercentage: UInt32 {
    get {return _lowpowerPercentage ?? 0}
    set {_lowpowerPercentage = newValue}
  }
  /// Returns true if `lowpowerPercentage` has been explicitly set.
  var hasLowpowerPercentage: Bool {return self._lowpowerPercentage != nil}
  /// Clears the value of `lowpowerPercentage`. Subsequent reads from it will return its default value.
  mutating func clearLowpowerPercentage() {self._lowpowerPercentage = nil}

  ///Report shutdown information
  var poweroffPercentage: UInt32 {
    get {return _poweroffPercentage ?? 0}
    set {_poweroffPercentage = newValue}
  }
  /// Returns true if `poweroffPercentage` has been explicitly set.
  var hasPoweroffPercentage: Bool {return self._poweroffPercentage != nil}
  /// Clears the value of `poweroffPercentage`. Subsequent reads from it will return its default value.
  mutating func clearPoweroffPercentage() {self._poweroffPercentage = nil}

  ///Unknown number blocking
  var phoneInterceptNumber: String {
    get {return _phoneInterceptNumber ?? String()}
    set {_phoneInterceptNumber = newValue}
  }
  /// Returns true if `phoneInterceptNumber` has been explicitly set.
  var hasPhoneInterceptNumber: Bool {return self._phoneInterceptNumber != nil}
  /// Clears the value of `phoneInterceptNumber`. Subsequent reads from it will return its default value.
  mutating func clearPhoneInterceptNumber() {self._phoneInterceptNumber = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: DateTime? = nil
  fileprivate var _wearstate: Bool? = nil
  fileprivate var _sleepstate: Bool? = nil
  fileprivate var _gnssinfo: SOSGNSSINFO? = nil
  fileprivate var _lowpowerPercentage: UInt32? = nil
  fileprivate var _poweroffPercentage: UInt32? = nil
  fileprivate var _phoneInterceptNumber: String? = nil
}

struct HealthAlarmV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _timeStamp ?? DateTime()}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  var alarmHr: HrAlarmV2 {
    get {return _alarmHr ?? HrAlarmV2()}
    set {_alarmHr = newValue}
  }
  /// Returns true if `alarmHr` has been explicitly set.
  var hasAlarmHr: Bool {return self._alarmHr != nil}
  /// Clears the value of `alarmHr`. Subsequent reads from it will return its default value.
  mutating func clearAlarmHr() {self._alarmHr = nil}

  var alarmSpo2: Spo2AlarmV2 {
    get {return _alarmSpo2 ?? Spo2AlarmV2()}
    set {_alarmSpo2 = newValue}
  }
  /// Returns true if `alarmSpo2` has been explicitly set.
  var hasAlarmSpo2: Bool {return self._alarmSpo2 != nil}
  /// Clears the value of `alarmSpo2`. Subsequent reads from it will return its default value.
  mutating func clearAlarmSpo2() {self._alarmSpo2 = nil}

  var alarmThrombus: ThrombusAlarmV2 {
    get {return _alarmThrombus ?? ThrombusAlarmV2()}
    set {_alarmThrombus = newValue}
  }
  /// Returns true if `alarmThrombus` has been explicitly set.
  var hasAlarmThrombus: Bool {return self._alarmThrombus != nil}
  /// Clears the value of `alarmThrombus`. Subsequent reads from it will return its default value.
  mutating func clearAlarmThrombus() {self._alarmThrombus = nil}

  var alarmFall: FallAlarmConfV2 {
    get {return _alarmFall ?? FallAlarmConfV2()}
    set {_alarmFall = newValue}
  }
  /// Returns true if `alarmFall` has been explicitly set.
  var hasAlarmFall: Bool {return self._alarmFall != nil}
  /// Clears the value of `alarmFall`. Subsequent reads from it will return its default value.
  mutating func clearAlarmFall() {self._alarmFall = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: DateTime? = nil
  fileprivate var _alarmHr: HrAlarmV2? = nil
  fileprivate var _alarmSpo2: Spo2AlarmV2? = nil
  fileprivate var _alarmThrombus: ThrombusAlarmV2? = nil
  fileprivate var _alarmFall: FallAlarmConfV2? = nil
}

struct PhoneBookInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var isSos: Bool {
    get {return _isSos ?? false}
    set {_isSos = newValue}
  }
  /// Returns true if `isSos` has been explicitly set.
  var hasIsSos: Bool {return self._isSos != nil}
  /// Clears the value of `isSos`. Subsequent reads from it will return its default value.
  mutating func clearIsSos() {self._isSos = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var number: String {
    get {return _number ?? String()}
    set {_number = newValue}
  }
  /// Returns true if `number` has been explicitly set.
  var hasNumber: Bool {return self._number != nil}
  /// Clears the value of `number`. Subsequent reads from it will return its default value.
  mutating func clearNumber() {self._number = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: UInt32? = nil
  fileprivate var _isSos: Bool? = nil
  fileprivate var _name: String? = nil
  fileprivate var _number: String? = nil
}

struct PhoneBookNotify {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var opt: PhoneOperation {
    get {return _opt ?? .add}
    set {_opt = newValue}
  }
  /// Returns true if `opt` has been explicitly set.
  var hasOpt: Bool {return self._opt != nil}
  /// Clears the value of `opt`. Subsequent reads from it will return its default value.
  mutating func clearOpt() {self._opt = nil}

  var info: [PhoneBookInfo] = []

  var phoneIntercept: Bool {
    get {return _phoneIntercept ?? false}
    set {_phoneIntercept = newValue}
  }
  /// Returns true if `phoneIntercept` has been explicitly set.
  var hasPhoneIntercept: Bool {return self._phoneIntercept != nil}
  /// Clears the value of `phoneIntercept`. Subsequent reads from it will return its default value.
  mutating func clearPhoneIntercept() {self._phoneIntercept = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _opt: PhoneOperation? = nil
  fileprivate var _phoneIntercept: Bool? = nil
}

struct PhoneBookConfirm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var res: PhoneResponse {
    get {return _storage._res ?? .succeed}
    set {_uniqueStorage()._res = newValue}
  }
  /// Returns true if `res` has been explicitly set.
  var hasRes: Bool {return _storage._res != nil}
  /// Clears the value of `res`. Subsequent reads from it will return its default value.
  mutating func clearRes() {_uniqueStorage()._res = nil}

  var num: UInt32 {
    get {return _storage._num ?? 0}
    set {_uniqueStorage()._num = newValue}
  }
  /// Returns true if `num` has been explicitly set.
  var hasNum: Bool {return _storage._num != nil}
  /// Clears the value of `num`. Subsequent reads from it will return its default value.
  mutating func clearNum() {_uniqueStorage()._num = nil}

  var alarminfo: PhoneAlarminfo {
    get {return _storage._alarminfo ?? PhoneAlarminfo()}
    set {_uniqueStorage()._alarminfo = newValue}
  }
  /// Returns true if `alarminfo` has been explicitly set.
  var hasAlarminfo: Bool {return _storage._alarminfo != nil}
  /// Clears the value of `alarminfo`. Subsequent reads from it will return its default value.
  mutating func clearAlarminfo() {_uniqueStorage()._alarminfo = nil}

  var alarm: HealthAlarmV2 {
    get {return _storage._alarm ?? HealthAlarmV2()}
    set {_uniqueStorage()._alarm = newValue}
  }
  /// Returns true if `alarm` has been explicitly set.
  var hasAlarm: Bool {return _storage._alarm != nil}
  /// Clears the value of `alarm`. Subsequent reads from it will return its default value.
  mutating func clearAlarm() {_uniqueStorage()._alarm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension PhoneOperation: @unchecked Sendable {}
extension PhoneResponse: @unchecked Sendable {}
extension SOSGNSSINFO: @unchecked Sendable {}
extension HrAlarmV2: @unchecked Sendable {}
extension Spo2AlarmV2: @unchecked Sendable {}
extension ThrombusAlarmV2: @unchecked Sendable {}
extension FallAlarmConfV2: @unchecked Sendable {}
extension PhoneAlarminfo: @unchecked Sendable {}
extension HealthAlarmV2: @unchecked Sendable {}
extension PhoneBookInfo: @unchecked Sendable {}
extension PhoneBookNotify: @unchecked Sendable {}
extension PhoneBookConfirm: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PhoneOperation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ADD"),
    2: .same(proto: "REMOVE"),
    3: .same(proto: "CLEAR"),
  ]
}

extension PhoneResponse: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SUCCEED"),
    2: .same(proto: "FAIL"),
    3: .same(proto: "EXIST"),
  ]
}

extension SOSGNSSINFO: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SOSGNSSINFO"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "longitude"),
    2: .same(proto: "latitude"),
  ]

  public var isInitialized: Bool {
    if self._longitude == nil {return false}
    if self._latitude == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._longitude) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._latitude) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._longitude {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._latitude {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SOSGNSSINFO, rhs: SOSGNSSINFO) -> Bool {
    if lhs._longitude != rhs._longitude {return false}
    if lhs._latitude != rhs._latitude {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HrAlarmV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HrAlarmV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hr"),
  ]

  public var isInitialized: Bool {
    if self._hr == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._hr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._hr {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HrAlarmV2, rhs: HrAlarmV2) -> Bool {
    if lhs._hr != rhs._hr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spo2AlarmV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Spo2AlarmV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "spo2"),
  ]

  public var isInitialized: Bool {
    if self._spo2 == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._spo2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._spo2 {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Spo2AlarmV2, rhs: Spo2AlarmV2) -> Bool {
    if lhs._spo2 != rhs._spo2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThrombusAlarmV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThrombusAlarmV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Thrombus_alarm"),
  ]

  public var isInitialized: Bool {
    if self._thrombusAlarm == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._thrombusAlarm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._thrombusAlarm {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThrombusAlarmV2, rhs: ThrombusAlarmV2) -> Bool {
    if lhs._thrombusAlarm != rhs._thrombusAlarm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FallAlarmConfV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FallAlarmConfV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "fall_alarm"),
  ]

  public var isInitialized: Bool {
    if self._fallAlarm == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._fallAlarm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._fallAlarm {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FallAlarmConfV2, rhs: FallAlarmConfV2) -> Bool {
    if lhs._fallAlarm != rhs._fallAlarm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PhoneAlarminfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PhoneAlarminfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
    2: .same(proto: "wearstate"),
    3: .same(proto: "sleepstate"),
    4: .same(proto: "gnssinfo"),
    5: .same(proto: "lowpowerPercentage"),
    6: .same(proto: "poweroffPercentage"),
    7: .standard(proto: "Phone_intercept_number"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if let v = self._timeStamp, !v.isInitialized {return false}
    if let v = self._gnssinfo, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._wearstate) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._sleepstate) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._gnssinfo) }()
      case 5: try { try decoder.decodeSingularFixed32Field(value: &self._lowpowerPercentage) }()
      case 6: try { try decoder.decodeSingularFixed32Field(value: &self._poweroffPercentage) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._phoneInterceptNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeStamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._wearstate {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._sleepstate {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._gnssinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._lowpowerPercentage {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._poweroffPercentage {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._phoneInterceptNumber {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PhoneAlarminfo, rhs: PhoneAlarminfo) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._wearstate != rhs._wearstate {return false}
    if lhs._sleepstate != rhs._sleepstate {return false}
    if lhs._gnssinfo != rhs._gnssinfo {return false}
    if lhs._lowpowerPercentage != rhs._lowpowerPercentage {return false}
    if lhs._poweroffPercentage != rhs._poweroffPercentage {return false}
    if lhs._phoneInterceptNumber != rhs._phoneInterceptNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthAlarmV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HealthAlarmV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
    2: .standard(proto: "alarm_hr"),
    3: .standard(proto: "alarm_spo2"),
    4: .standard(proto: "alarm_Thrombus"),
    5: .standard(proto: "alarm_fall"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if let v = self._timeStamp, !v.isInitialized {return false}
    if let v = self._alarmHr, !v.isInitialized {return false}
    if let v = self._alarmSpo2, !v.isInitialized {return false}
    if let v = self._alarmThrombus, !v.isInitialized {return false}
    if let v = self._alarmFall, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._alarmHr) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._alarmSpo2) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._alarmThrombus) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._alarmFall) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeStamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._alarmHr {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._alarmSpo2 {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._alarmThrombus {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._alarmFall {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HealthAlarmV2, rhs: HealthAlarmV2) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._alarmHr != rhs._alarmHr {return false}
    if lhs._alarmSpo2 != rhs._alarmSpo2 {return false}
    if lhs._alarmThrombus != rhs._alarmThrombus {return false}
    if lhs._alarmFall != rhs._alarmFall {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PhoneBookInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PhoneBookInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "is_sos"),
    3: .same(proto: "name"),
    4: .same(proto: "number"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._isSos == nil {return false}
    if self._name == nil {return false}
    if self._number == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._isSos) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._number) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._isSos {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._number {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PhoneBookInfo, rhs: PhoneBookInfo) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._isSos != rhs._isSos {return false}
    if lhs._name != rhs._name {return false}
    if lhs._number != rhs._number {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PhoneBookNotify: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PhoneBookNotify"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "opt"),
    2: .same(proto: "info"),
    3: .same(proto: "PhoneIntercept"),
  ]

  public var isInitialized: Bool {
    if self._opt == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.info) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._opt) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.info) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._phoneIntercept) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._opt {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    if !self.info.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.info, fieldNumber: 2)
    }
    try { if let v = self._phoneIntercept {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PhoneBookNotify, rhs: PhoneBookNotify) -> Bool {
    if lhs._opt != rhs._opt {return false}
    if lhs.info != rhs.info {return false}
    if lhs._phoneIntercept != rhs._phoneIntercept {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PhoneBookConfirm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PhoneBookConfirm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "res"),
    2: .same(proto: "num"),
    3: .same(proto: "Alarminfo"),
    4: .same(proto: "alarm"),
  ]

  fileprivate class _StorageClass {
    var _res: PhoneResponse? = nil
    var _num: UInt32? = nil
    var _alarminfo: PhoneAlarminfo? = nil
    var _alarm: HealthAlarmV2? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _res = source._res
      _num = source._num
      _alarminfo = source._alarminfo
      _alarm = source._alarm
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._res == nil {return false}
      if _storage._num == nil {return false}
      if let v = _storage._alarminfo, !v.isInitialized {return false}
      if let v = _storage._alarm, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._res) }()
        case 2: try { try decoder.decodeSingularFixed32Field(value: &_storage._num) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._alarminfo) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._alarm) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._res {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._num {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._alarminfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._alarm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PhoneBookConfirm, rhs: PhoneBookConfirm) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._res != rhs_storage._res {return false}
        if _storage._num != rhs_storage._num {return false}
        if _storage._alarminfo != rhs_storage._alarminfo {return false}
        if _storage._alarm != rhs_storage._alarm {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
