// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ThirdParty_health_data_V2.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct MattressDataHealth {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Physical signs
  var physicalSignsData: Data {
    get {return _physicalSignsData ?? Data()}
    set {_physicalSignsData = newValue}
  }
  /// Returns true if `physicalSignsData` has been explicitly set.
  var hasPhysicalSignsData: Bool {return self._physicalSignsData != nil}
  /// Clears the value of `physicalSignsData`. Subsequent reads from it will return its default value.
  mutating func clearPhysicalSignsData() {self._physicalSignsData = nil}

  var acquisitionTime: DateTime {
    get {return _acquisitionTime ?? DateTime()}
    set {_acquisitionTime = newValue}
  }
  /// Returns true if `acquisitionTime` has been explicitly set.
  var hasAcquisitionTime: Bool {return self._acquisitionTime != nil}
  /// Clears the value of `acquisitionTime`. Subsequent reads from it will return its default value.
  mutating func clearAcquisitionTime() {self._acquisitionTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _physicalSignsData: Data? = nil
  fileprivate var _acquisitionTime: DateTime? = nil
}

struct HisDataThirdPartyV2 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: HisDataThirdPartyV2.OneOf_Data? = nil

  var mattressData: MattressDataHealth {
    get {
      if case .mattressData(let v)? = data {return v}
      return MattressDataHealth()
    }
    set {data = .mattressData(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Data: Equatable {
    case mattressData(MattressDataHealth)

    fileprivate var isInitialized: Bool {
      guard case .mattressData(let v) = self else {return true}
      return v.isInitialized
    }

  #if !swift(>=4.1)
    static func ==(lhs: HisDataThirdPartyV2.OneOf_Data, rhs: HisDataThirdPartyV2.OneOf_Data) -> Bool {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch (lhs, rhs) {
      case (.mattressData, .mattressData): return {
        guard case .mattressData(let l) = lhs, case .mattressData(let r) = rhs else { preconditionFailure() }
        return l == r
      }()
      }
    }
  #endif
  }

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension MattressDataHealth: @unchecked Sendable {}
extension HisDataThirdPartyV2: @unchecked Sendable {}
extension HisDataThirdPartyV2.OneOf_Data: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension MattressDataHealth: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "MattressDataHealth"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "Physical_SignsData"),
    2: .standard(proto: "Acquisition_time"),
  ]

  public var isInitialized: Bool {
    if self._physicalSignsData == nil {return false}
    if self._acquisitionTime == nil {return false}
    if let v = self._acquisitionTime, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._physicalSignsData) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._acquisitionTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._physicalSignsData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._acquisitionTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: MattressDataHealth, rhs: MattressDataHealth) -> Bool {
    if lhs._physicalSignsData != rhs._physicalSignsData {return false}
    if lhs._acquisitionTime != rhs._acquisitionTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HisDataThirdPartyV2: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HisDataThirdPartyV2"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "MattressData"),
  ]

  public var isInitialized: Bool {
    if let v = self.data, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try {
        var v: MattressDataHealth?
        var hadOneofValue = false
        if let current = self.data {
          hadOneofValue = true
          if case .mattressData(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.data = .mattressData(v)
        }
      }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if case .mattressData(let v)? = self.data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HisDataThirdPartyV2, rhs: HisDataThirdPartyV2) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
