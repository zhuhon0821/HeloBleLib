// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Alarm_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct SOSGNSSINFOV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _timeStamp ?? DateTime()}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  var longitude: Float {
    get {return _longitude ?? 0}
    set {_longitude = newValue}
  }
  /// Returns true if `longitude` has been explicitly set.
  var hasLongitude: Bool {return self._longitude != nil}
  /// Clears the value of `longitude`. Subsequent reads from it will return its default value.
  mutating func clearLongitude() {self._longitude = nil}

  var latitude: Float {
    get {return _latitude ?? 0}
    set {_latitude = newValue}
  }
  /// Returns true if `latitude` has been explicitly set.
  var hasLatitude: Bool {return self._latitude != nil}
  /// Clears the value of `latitude`. Subsequent reads from it will return its default value.
  mutating func clearLatitude() {self._latitude = nil}

  var gpsType: GPSTYPE {
    get {return _gpsType ?? .null}
    set {_gpsType = newValue}
  }
  /// Returns true if `gpsType` has been explicitly set.
  var hasGpsType: Bool {return self._gpsType != nil}
  /// Clears the value of `gpsType`. Subsequent reads from it will return its default value.
  mutating func clearGpsType() {self._gpsType = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: DateTime? = nil
  fileprivate var _longitude: Float? = nil
  fileprivate var _latitude: Float? = nil
  fileprivate var _gpsType: GPSTYPE? = nil
}

struct HrAlarmV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _timeStamp ?? DateTime()}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  var hr: UInt32 {
    get {return _hr ?? 0}
    set {_hr = newValue}
  }
  /// Returns true if `hr` has been explicitly set.
  var hasHr: Bool {return self._hr != nil}
  /// Clears the value of `hr`. Subsequent reads from it will return its default value.
  mutating func clearHr() {self._hr = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: DateTime? = nil
  fileprivate var _hr: UInt32? = nil
}

struct Spo2AlarmV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _timeStamp ?? DateTime()}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  var spo2: UInt32 {
    get {return _spo2 ?? 0}
    set {_spo2 = newValue}
  }
  /// Returns true if `spo2` has been explicitly set.
  var hasSpo2: Bool {return self._spo2 != nil}
  /// Clears the value of `spo2`. Subsequent reads from it will return its default value.
  mutating func clearSpo2() {self._spo2 = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: DateTime? = nil
  fileprivate var _spo2: UInt32? = nil
}

struct ThrombusAlarmV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _timeStamp ?? DateTime()}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  var thrombusAlarm: Bool {
    get {return _thrombusAlarm ?? false}
    set {_thrombusAlarm = newValue}
  }
  /// Returns true if `thrombusAlarm` has been explicitly set.
  var hasThrombusAlarm: Bool {return self._thrombusAlarm != nil}
  /// Clears the value of `thrombusAlarm`. Subsequent reads from it will return its default value.
  mutating func clearThrombusAlarm() {self._thrombusAlarm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: DateTime? = nil
  fileprivate var _thrombusAlarm: Bool? = nil
}

struct FallAlarmConfV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _timeStamp ?? DateTime()}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  var fallAlarm: Bool {
    get {return _fallAlarm ?? false}
    set {_fallAlarm = newValue}
  }
  /// Returns true if `fallAlarm` has been explicitly set.
  var hasFallAlarm: Bool {return self._fallAlarm != nil}
  /// Clears the value of `fallAlarm`. Subsequent reads from it will return its default value.
  mutating func clearFallAlarm() {self._fallAlarm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: DateTime? = nil
  fileprivate var _fallAlarm: Bool? = nil
}

struct TemperatureConf {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _timeStamp ?? DateTime()}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  var temperature: UInt32 {
    get {return _temperature ?? 0}
    set {_temperature = newValue}
  }
  /// Returns true if `temperature` has been explicitly set.
  var hasTemperature: Bool {return self._temperature != nil}
  /// Clears the value of `temperature`. Subsequent reads from it will return its default value.
  mutating func clearTemperature() {self._temperature = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: DateTime? = nil
  fileprivate var _temperature: UInt32? = nil
}

struct BpConf {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _timeStamp ?? DateTime()}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  var sbp: UInt32 {
    get {return _sbp ?? 0}
    set {_sbp = newValue}
  }
  /// Returns true if `sbp` has been explicitly set.
  var hasSbp: Bool {return self._sbp != nil}
  /// Clears the value of `sbp`. Subsequent reads from it will return its default value.
  mutating func clearSbp() {self._sbp = nil}

  var dbp: UInt32 {
    get {return _dbp ?? 0}
    set {_dbp = newValue}
  }
  /// Returns true if `dbp` has been explicitly set.
  var hasDbp: Bool {return self._dbp != nil}
  /// Clears the value of `dbp`. Subsequent reads from it will return its default value.
  mutating func clearDbp() {self._dbp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: DateTime? = nil
  fileprivate var _sbp: UInt32? = nil
  fileprivate var _dbp: UInt32? = nil
}

struct SedentaryConf {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _timeStamp ?? DateTime()}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: DateTime? = nil
}

struct AlarminfoV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timeStamp: DateTime {
    get {return _timeStamp ?? DateTime()}
    set {_timeStamp = newValue}
  }
  /// Returns true if `timeStamp` has been explicitly set.
  var hasTimeStamp: Bool {return self._timeStamp != nil}
  /// Clears the value of `timeStamp`. Subsequent reads from it will return its default value.
  mutating func clearTimeStamp() {self._timeStamp = nil}

  ///Not wearing status information warning report
  var wearstate: Bool {
    get {return _wearstate ?? false}
    set {_wearstate = newValue}
  }
  /// Returns true if `wearstate` has been explicitly set.
  var hasWearstate: Bool {return self._wearstate != nil}
  /// Clears the value of `wearstate`. Subsequent reads from it will return its default value.
  mutating func clearWearstate() {self._wearstate = nil}

  ///sleep status information warning report
  var sleepstate: Bool {
    get {return _sleepstate ?? false}
    set {_sleepstate = newValue}
  }
  /// Returns true if `sleepstate` has been explicitly set.
  var hasSleepstate: Bool {return self._sleepstate != nil}
  /// Clears the value of `sleepstate`. Subsequent reads from it will return its default value.
  mutating func clearSleepstate() {self._sleepstate = nil}

  ///Low battery warning information reporting
  var lowpowerPercentage: UInt32 {
    get {return _lowpowerPercentage ?? 0}
    set {_lowpowerPercentage = newValue}
  }
  /// Returns true if `lowpowerPercentage` has been explicitly set.
  var hasLowpowerPercentage: Bool {return self._lowpowerPercentage != nil}
  /// Clears the value of `lowpowerPercentage`. Subsequent reads from it will return its default value.
  mutating func clearLowpowerPercentage() {self._lowpowerPercentage = nil}

  ///Report shutdown information
  var poweroffPercentage: UInt32 {
    get {return _poweroffPercentage ?? 0}
    set {_poweroffPercentage = newValue}
  }
  /// Returns true if `poweroffPercentage` has been explicitly set.
  var hasPoweroffPercentage: Bool {return self._poweroffPercentage != nil}
  /// Clears the value of `poweroffPercentage`. Subsequent reads from it will return its default value.
  mutating func clearPoweroffPercentage() {self._poweroffPercentage = nil}

  ///Unknown number blocking
  var interceptNumber: String {
    get {return _interceptNumber ?? String()}
    set {_interceptNumber = newValue}
  }
  /// Returns true if `interceptNumber` has been explicitly set.
  var hasInterceptNumber: Bool {return self._interceptNumber != nil}
  /// Clears the value of `interceptNumber`. Subsequent reads from it will return its default value.
  mutating func clearInterceptNumber() {self._interceptNumber = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timeStamp: DateTime? = nil
  fileprivate var _wearstate: Bool? = nil
  fileprivate var _sleepstate: Bool? = nil
  fileprivate var _lowpowerPercentage: UInt32? = nil
  fileprivate var _poweroffPercentage: UInt32? = nil
  fileprivate var _interceptNumber: String? = nil
}

struct HealthAlarmV3 {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var alarmHr: [HrAlarmV3] = []

  var alarmSpo2: [Spo2AlarmV3] = []

  var alarmThrombus: [ThrombusAlarmV3] = []

  var alarmFall: [FallAlarmConfV3] = []

  var alarmTemperature: [TemperatureConf] = []

  var alarmBp: [BpConf] = []

  ///SOS warning information reporting
  var gnssinfo: [SOSGNSSINFOV3] = []

  var alarmSedentary: [SedentaryConf] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Alarm_infokConfirm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var alarminfo: AlarminfoV3 {
    get {return _alarminfo ?? AlarminfoV3()}
    set {_alarminfo = newValue}
  }
  /// Returns true if `alarminfo` has been explicitly set.
  var hasAlarminfo: Bool {return self._alarminfo != nil}
  /// Clears the value of `alarminfo`. Subsequent reads from it will return its default value.
  mutating func clearAlarminfo() {self._alarminfo = nil}

  var alarm: HealthAlarmV3 {
    get {return _alarm ?? HealthAlarmV3()}
    set {_alarm = newValue}
  }
  /// Returns true if `alarm` has been explicitly set.
  var hasAlarm: Bool {return self._alarm != nil}
  /// Clears the value of `alarm`. Subsequent reads from it will return its default value.
  mutating func clearAlarm() {self._alarm = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _alarminfo: AlarminfoV3? = nil
  fileprivate var _alarm: HealthAlarmV3? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension SOSGNSSINFOV3: @unchecked Sendable {}
extension HrAlarmV3: @unchecked Sendable {}
extension Spo2AlarmV3: @unchecked Sendable {}
extension ThrombusAlarmV3: @unchecked Sendable {}
extension FallAlarmConfV3: @unchecked Sendable {}
extension TemperatureConf: @unchecked Sendable {}
extension BpConf: @unchecked Sendable {}
extension SedentaryConf: @unchecked Sendable {}
extension AlarminfoV3: @unchecked Sendable {}
extension HealthAlarmV3: @unchecked Sendable {}
extension Alarm_infokConfirm: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SOSGNSSINFOV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SOSGNSSINFOV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
    2: .same(proto: "longitude"),
    3: .same(proto: "latitude"),
    4: .standard(proto: "gps_type"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._longitude == nil {return false}
    if self._latitude == nil {return false}
    if self._gpsType == nil {return false}
    if let v = self._timeStamp, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._longitude) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._latitude) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._gpsType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeStamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._longitude {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._latitude {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._gpsType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SOSGNSSINFOV3, rhs: SOSGNSSINFOV3) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._longitude != rhs._longitude {return false}
    if lhs._latitude != rhs._latitude {return false}
    if lhs._gpsType != rhs._gpsType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HrAlarmV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HrAlarmV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
    2: .same(proto: "hr"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._hr == nil {return false}
    if let v = self._timeStamp, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._hr) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeStamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._hr {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HrAlarmV3, rhs: HrAlarmV3) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._hr != rhs._hr {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Spo2AlarmV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Spo2AlarmV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
    2: .same(proto: "spo2"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._spo2 == nil {return false}
    if let v = self._timeStamp, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._spo2) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeStamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._spo2 {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Spo2AlarmV3, rhs: Spo2AlarmV3) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._spo2 != rhs._spo2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ThrombusAlarmV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "ThrombusAlarmV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
    2: .standard(proto: "Thrombus_alarm"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._thrombusAlarm == nil {return false}
    if let v = self._timeStamp, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._thrombusAlarm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeStamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._thrombusAlarm {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: ThrombusAlarmV3, rhs: ThrombusAlarmV3) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._thrombusAlarm != rhs._thrombusAlarm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension FallAlarmConfV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "FallAlarmConfV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
    2: .standard(proto: "fall_alarm"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._fallAlarm == nil {return false}
    if let v = self._timeStamp, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._fallAlarm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeStamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fallAlarm {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: FallAlarmConfV3, rhs: FallAlarmConfV3) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._fallAlarm != rhs._fallAlarm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension TemperatureConf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "TemperatureConf"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
    2: .same(proto: "temperature"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._temperature == nil {return false}
    if let v = self._timeStamp, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._temperature) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeStamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._temperature {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: TemperatureConf, rhs: TemperatureConf) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._temperature != rhs._temperature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension BpConf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "BpConf"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
    2: .same(proto: "sbp"),
    3: .same(proto: "dbp"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if self._sbp == nil {return false}
    if self._dbp == nil {return false}
    if let v = self._timeStamp, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._sbp) }()
      case 3: try { try decoder.decodeSingularFixed32Field(value: &self._dbp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeStamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._sbp {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._dbp {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: BpConf, rhs: BpConf) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._sbp != rhs._sbp {return false}
    if lhs._dbp != rhs._dbp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SedentaryConf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SedentaryConf"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if let v = self._timeStamp, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeStamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeStamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SedentaryConf, rhs: SedentaryConf) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AlarminfoV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "AlarminfoV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "time_stamp"),
    2: .same(proto: "wearstate"),
    3: .same(proto: "sleepstate"),
    4: .same(proto: "lowpowerPercentage"),
    5: .same(proto: "poweroffPercentage"),
    6: .standard(proto: "intercept_number"),
  ]

  public var isInitialized: Bool {
    if self._timeStamp == nil {return false}
    if let v = self._timeStamp, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timeStamp) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._wearstate) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._sleepstate) }()
      case 4: try { try decoder.decodeSingularFixed32Field(value: &self._lowpowerPercentage) }()
      case 5: try { try decoder.decodeSingularFixed32Field(value: &self._poweroffPercentage) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._interceptNumber) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeStamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._wearstate {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._sleepstate {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._lowpowerPercentage {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._poweroffPercentage {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._interceptNumber {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: AlarminfoV3, rhs: AlarminfoV3) -> Bool {
    if lhs._timeStamp != rhs._timeStamp {return false}
    if lhs._wearstate != rhs._wearstate {return false}
    if lhs._sleepstate != rhs._sleepstate {return false}
    if lhs._lowpowerPercentage != rhs._lowpowerPercentage {return false}
    if lhs._poweroffPercentage != rhs._poweroffPercentage {return false}
    if lhs._interceptNumber != rhs._interceptNumber {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthAlarmV3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "HealthAlarmV3"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "alarm_hr"),
    2: .standard(proto: "alarm_spo2"),
    3: .standard(proto: "alarm_Thrombus"),
    4: .standard(proto: "alarm_fall"),
    5: .standard(proto: "alarm_Temperature"),
    6: .standard(proto: "alarm_Bp"),
    7: .same(proto: "gnssinfo"),
    8: .standard(proto: "alarm_Sedentary"),
  ]

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.alarmHr) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.alarmSpo2) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.alarmThrombus) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.alarmFall) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.alarmTemperature) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.alarmBp) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.gnssinfo) {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.alarmSedentary) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.alarmHr) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.alarmSpo2) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.alarmThrombus) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.alarmFall) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.alarmTemperature) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.alarmBp) }()
      case 7: try { try decoder.decodeRepeatedMessageField(value: &self.gnssinfo) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.alarmSedentary) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.alarmHr.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alarmHr, fieldNumber: 1)
    }
    if !self.alarmSpo2.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alarmSpo2, fieldNumber: 2)
    }
    if !self.alarmThrombus.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alarmThrombus, fieldNumber: 3)
    }
    if !self.alarmFall.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alarmFall, fieldNumber: 4)
    }
    if !self.alarmTemperature.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alarmTemperature, fieldNumber: 5)
    }
    if !self.alarmBp.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alarmBp, fieldNumber: 6)
    }
    if !self.gnssinfo.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gnssinfo, fieldNumber: 7)
    }
    if !self.alarmSedentary.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alarmSedentary, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: HealthAlarmV3, rhs: HealthAlarmV3) -> Bool {
    if lhs.alarmHr != rhs.alarmHr {return false}
    if lhs.alarmSpo2 != rhs.alarmSpo2 {return false}
    if lhs.alarmThrombus != rhs.alarmThrombus {return false}
    if lhs.alarmFall != rhs.alarmFall {return false}
    if lhs.alarmTemperature != rhs.alarmTemperature {return false}
    if lhs.alarmBp != rhs.alarmBp {return false}
    if lhs.gnssinfo != rhs.gnssinfo {return false}
    if lhs.alarmSedentary != rhs.alarmSedentary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Alarm_infokConfirm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "Alarm_infokConfirm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "Alarminfo"),
    2: .same(proto: "alarm"),
  ]

  public var isInitialized: Bool {
    if let v = self._alarminfo, !v.isInitialized {return false}
    if let v = self._alarm, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._alarminfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._alarm) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._alarminfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._alarm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Alarm_infokConfirm, rhs: Alarm_infokConfirm) -> Bool {
    if lhs._alarminfo != rhs._alarminfo {return false}
    if lhs._alarm != rhs._alarm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
