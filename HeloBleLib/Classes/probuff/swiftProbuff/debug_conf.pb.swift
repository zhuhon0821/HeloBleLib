// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: debug_conf.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct dbgConfNotification {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 0:None, 1:Error, 2:Warning, 3:Info, 4:Debug 
  var syslogLevel: UInt32 {
    get {return _syslogLevel ?? 0}
    set {_syslogLevel = newValue}
  }
  /// Returns true if `syslogLevel` has been explicitly set.
  var hasSyslogLevel: Bool {return self._syslogLevel != nil}
  /// Clears the value of `syslogLevel`. Subsequent reads from it will return its default value.
  mutating func clearSyslogLevel() {self._syslogLevel = nil}

  ///0: Disable watcher, or enable watcher to print at fixed interval(milliseconds)
  var watcherInterval: UInt32 {
    get {return _watcherInterval ?? 0}
    set {_watcherInterval = newValue}
  }
  /// Returns true if `watcherInterval` has been explicitly set.
  var hasWatcherInterval: Bool {return self._watcherInterval != nil}
  /// Clears the value of `watcherInterval`. Subsequent reads from it will return its default value.
  mutating func clearWatcherInterval() {self._watcherInterval = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _syslogLevel: UInt32? = nil
  fileprivate var _watcherInterval: UInt32? = nil
}

struct dbgConfSubscriber {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var supportSyslogLevel: Bool {
    get {return _supportSyslogLevel ?? false}
    set {_supportSyslogLevel = newValue}
  }
  /// Returns true if `supportSyslogLevel` has been explicitly set.
  var hasSupportSyslogLevel: Bool {return self._supportSyslogLevel != nil}
  /// Clears the value of `supportSyslogLevel`. Subsequent reads from it will return its default value.
  mutating func clearSupportSyslogLevel() {self._supportSyslogLevel = nil}

  var supportSysWatcher: Bool {
    get {return _supportSysWatcher ?? false}
    set {_supportSysWatcher = newValue}
  }
  /// Returns true if `supportSysWatcher` has been explicitly set.
  var hasSupportSysWatcher: Bool {return self._supportSysWatcher != nil}
  /// Clears the value of `supportSysWatcher`. Subsequent reads from it will return its default value.
  mutating func clearSupportSysWatcher() {self._supportSysWatcher = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _supportSyslogLevel: Bool? = nil
  fileprivate var _supportSysWatcher: Bool? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension dbgConfNotification: @unchecked Sendable {}
extension dbgConfSubscriber: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension dbgConfNotification: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "dbgConfNotification"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "syslog_level"),
    2: .standard(proto: "watcher_interval"),
  ]

  public var isInitialized: Bool {
    if self._syslogLevel == nil {return false}
    if self._watcherInterval == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self._syslogLevel) }()
      case 2: try { try decoder.decodeSingularFixed32Field(value: &self._watcherInterval) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._syslogLevel {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._watcherInterval {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: dbgConfNotification, rhs: dbgConfNotification) -> Bool {
    if lhs._syslogLevel != rhs._syslogLevel {return false}
    if lhs._watcherInterval != rhs._watcherInterval {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension dbgConfSubscriber: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "dbgConfSubscriber"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "support_syslog_level"),
    2: .standard(proto: "support_sys_watcher"),
  ]

  public var isInitialized: Bool {
    if self._supportSyslogLevel == nil {return false}
    if self._supportSysWatcher == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._supportSyslogLevel) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._supportSysWatcher) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._supportSyslogLevel {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._supportSysWatcher {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: dbgConfSubscriber, rhs: dbgConfSubscriber) -> Bool {
    if lhs._supportSyslogLevel != rhs._supportSyslogLevel {return false}
    if lhs._supportSysWatcher != rhs._supportSysWatcher {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
