// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: gsm_command.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum FirmwareOperation: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case start // = 1
  case stop // = 2

  init() {
    self = .start
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .start
    case 2: self = .stop
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .start: return 1
    case .stop: return 2
    }
  }

}

#if swift(>=4.2)

extension FirmwareOperation: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct GsmUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var model: String {
    get {return _model ?? String()}
    set {_model = newValue}
  }
  /// Returns true if `model` has been explicitly set.
  var hasModel: Bool {return self._model != nil}
  /// Clears the value of `model`. Subsequent reads from it will return its default value.
  mutating func clearModel() {self._model = nil}

  var fudesc: FUDescResponse {
    get {return _fudesc ?? FUDescResponse()}
    set {_fudesc = newValue}
  }
  /// Returns true if `fudesc` has been explicitly set.
  var hasFudesc: Bool {return self._fudesc != nil}
  /// Clears the value of `fudesc`. Subsequent reads from it will return its default value.
  mutating func clearFudesc() {self._fudesc = nil}

  var opt: FirmwareOperation {
    get {return _opt ?? .start}
    set {_opt = newValue}
  }
  /// Returns true if `opt` has been explicitly set.
  var hasOpt: Bool {return self._opt != nil}
  /// Clears the value of `opt`. Subsequent reads from it will return its default value.
  mutating func clearOpt() {self._opt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _model: String? = nil
  fileprivate var _fudesc: FUDescResponse? = nil
  fileprivate var _opt: FirmwareOperation? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension FirmwareOperation: @unchecked Sendable {}
extension GsmUpdate: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension FirmwareOperation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "START"),
    2: .same(proto: "STOP"),
  ]
}

extension GsmUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "GsmUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "model"),
    2: .same(proto: "fudesc"),
    3: .same(proto: "opt"),
  ]

  public var isInitialized: Bool {
    if let v = self._fudesc, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._model) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._fudesc) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._opt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._model {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._fudesc {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._opt {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: GsmUpdate, rhs: GsmUpdate) -> Bool {
    if lhs._model != rhs._model {return false}
    if lhs._fudesc != rhs._fudesc {return false}
    if lhs._opt != rhs._opt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
